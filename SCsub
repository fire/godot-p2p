Import('env')

module_env = env.Clone()
module_env.Append(CPPDEFINES=[('FMT_HEADER_ONLY')])
module_env.Prepend(CPPPATH=['thirdparty/cpp-libp2p/include'])
module_env.Prepend(CPPPATH=['thirdparty/GSL-3.1.0/include'])
module_env.Prepend(CPPPATH=['thirdparty/di-cpp14/include'])
module_env.Prepend(CPPPATH=['thirdparty/c-ares-1.17.2/include'])
module_env.Prepend(CPPPATH=['thirdparty/hat-trie-master/include'])
module_env.Prepend(CPPPATH=['thirdparty/sqlite_modern_cpp-master/hdr'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_noise_proto'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_secio_proto'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_plaintext_proto'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_keys_proto'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_kademlia_proto'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_noise_proto/generated'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_secio_proto/generated'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_kademlia_proto/generated'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_plaintext_proto/generated'])
module_env.Prepend(CPPPATH=['thirdparty/pb/p2p_keys_proto/generated'])
module_env.Prepend(CPPPATH=['thirdparty/protobuf-3.11.0/src'])
module_env.Prepend(CPPPATH=['thirdparty/yaml-cpp-yaml-cpp-0.7.0/include'])
module_env.Prepend(CPPPATH=['thirdparty/fmt-7.0.3/include'])
module_env.Prepend(CPPPATH=['thirdparty/soralog-0.0.9/include'])
module_env.Prepend(CPPPATH=['thirdparty/soralog-0.0.9/src/impl'])

env.Append(LIBS=['crypto', 'ssl', 'protobuf-lite', 'protoc', 'cares', 'boost_random'])

env_thirdparty = module_env.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/pb/p2p_keys_proto/generated/crypto/protobuf/*.cc")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/pb/p2p_kademlia_proto/generated/protocol/kademlia/protobuf/*.cc")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/pb/p2p_noise_proto/generated/security/noise/protobuf/*.cc")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/pb/p2p_secio_proto/generated/security/secio/protobuf/*.cc")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/pb/p2p_plaintext_proto/generated/security/plaintext/protobuf/*.cc")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/basic/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/basic/scheduler/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/common/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/common/common/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/common/common/asio/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/key_validator/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/crypto_provider/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/hmac_provider/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/ecdsa_provider/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/secp256k1_provider/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/x25519_provider/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/ed25519_provider/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/chachapoly/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/rsa_provider/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/aes_provider/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/key_marshaller/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/sha/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/crypto/random_generator/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/log/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/muxer/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/muxer/mplex/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/muxer/yamux/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/peer/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/peer/impl/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/peer/address_repository/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/peer/protocol_repository/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/peer/key_repository/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/protocol_muxer/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/storage/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/connection/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/host/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/host/basic_host/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/multi/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/multi/converters/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/multi/multibase_codec/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/multi/multibase_codec/codecs/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/network/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/network/impl/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/network/cares/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/protocol/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/protocol/common/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/protocol/common/asio/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/protocol/kademlia/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/protocol/kademlia/impl/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/protocol_muxer/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/protocol_muxer/multiselect/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/protocol_muxer/multiselect_instance/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/security/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/security/secio/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/security/tls/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/security/noise/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/security/noise/crypto/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/security/plaintext/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/transport/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/transport/impl/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/transport/tcp/*.cpp")

env_thirdparty.add_source_files(env.modules_sources, "thirdparty/cpp-libp2p/src/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/soralog-0.0.9/src/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/soralog-0.0.9/src/impl/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/c-ares-1.17.2/src/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/yaml-cpp-yaml-cpp-0.7.0/src/impl/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/yaml-cpp-yaml-cpp-0.7.0/src/*.cpp")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/fmt-7.0.3/src/format.cc")
env_thirdparty.add_source_files(env.modules_sources, "thirdparty/fmt-7.0.3/src/os.cc")

module_env.add_source_files(env.modules_sources, "*.cpp")
