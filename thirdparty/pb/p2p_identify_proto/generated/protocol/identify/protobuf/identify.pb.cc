// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/identify/protobuf/identify.proto

#include "protocol/identify/protobuf/identify.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fidentify_2fprotobuf_2fidentify_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Delta_protocol_2fidentify_2fprotobuf_2fidentify_2eproto;
namespace identify {
namespace pb {
class DeltaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Delta> _instance;
} _Delta_default_instance_;
class IdentifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identify> _instance;
} _Identify_default_instance_;
}  // namespace pb
}  // namespace identify
static void InitDefaultsscc_info_Delta_protocol_2fidentify_2fprotobuf_2fidentify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::identify::pb::_Delta_default_instance_;
    new (ptr) ::identify::pb::Delta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::identify::pb::Delta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Delta_protocol_2fidentify_2fprotobuf_2fidentify_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Delta_protocol_2fidentify_2fprotobuf_2fidentify_2eproto}, {}};

static void InitDefaultsscc_info_Identify_protocol_2fidentify_2fprotobuf_2fidentify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::identify::pb::_Identify_default_instance_;
    new (ptr) ::identify::pb::Identify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::identify::pb::Identify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identify_protocol_2fidentify_2fprotobuf_2fidentify_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Identify_protocol_2fidentify_2fprotobuf_2fidentify_2eproto}, {
      &scc_info_Delta_protocol_2fidentify_2fprotobuf_2fidentify_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2fidentify_2fprotobuf_2fidentify_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocol_2fidentify_2fprotobuf_2fidentify_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2fidentify_2fprotobuf_2fidentify_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2fidentify_2fprotobuf_2fidentify_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::identify::pb::Delta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::identify::pb::Delta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::identify::pb::Delta, added_protocols_),
  PROTOBUF_FIELD_OFFSET(::identify::pb::Delta, rm_protocols_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::identify::pb::Identify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::identify::pb::Identify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::identify::pb::Identify, protocolversion_),
  PROTOBUF_FIELD_OFFSET(::identify::pb::Identify, agentversion_),
  PROTOBUF_FIELD_OFFSET(::identify::pb::Identify, publickey_),
  PROTOBUF_FIELD_OFFSET(::identify::pb::Identify, listenaddrs_),
  PROTOBUF_FIELD_OFFSET(::identify::pb::Identify, observedaddr_),
  PROTOBUF_FIELD_OFFSET(::identify::pb::Identify, protocols_),
  PROTOBUF_FIELD_OFFSET(::identify::pb::Identify, delta_),
  2,
  3,
  0,
  ~0u,
  1,
  ~0u,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::identify::pb::Delta)},
  { 9, 21, sizeof(::identify::pb::Identify)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::identify::pb::_Delta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::identify::pb::_Identify_default_instance_),
};

const char descriptor_table_protodef_protocol_2fidentify_2fprotobuf_2fidentify_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)protocol/identify/protobuf/identify.pr"
  "oto\022\013identify.pb\"6\n\005Delta\022\027\n\017added_proto"
  "cols\030\001 \003(\t\022\024\n\014rm_protocols\030\002 \003(\t\"\255\001\n\010Ide"
  "ntify\022\027\n\017protocolVersion\030\005 \001(\t\022\024\n\014agentV"
  "ersion\030\006 \001(\t\022\021\n\tpublicKey\030\001 \001(\014\022\023\n\013liste"
  "nAddrs\030\002 \003(\014\022\024\n\014observedAddr\030\004 \001(\014\022\021\n\tpr"
  "otocols\030\003 \003(\t\022!\n\005delta\030\007 \001(\0132\022.identify."
  "pb.Delta"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto_sccs[2] = {
  &scc_info_Delta_protocol_2fidentify_2fprotobuf_2fidentify_2eproto.base,
  &scc_info_Identify_protocol_2fidentify_2fprotobuf_2fidentify_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto_once;
static bool descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto = {
  &descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto_initialized, descriptor_table_protodef_protocol_2fidentify_2fprotobuf_2fidentify_2eproto, "protocol/identify/protobuf/identify.proto", 288,
  &descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto_once, descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto_sccs, descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_protocol_2fidentify_2fprotobuf_2fidentify_2eproto::offsets,
  file_level_metadata_protocol_2fidentify_2fprotobuf_2fidentify_2eproto, 2, file_level_enum_descriptors_protocol_2fidentify_2fprotobuf_2fidentify_2eproto, file_level_service_descriptors_protocol_2fidentify_2fprotobuf_2fidentify_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2fidentify_2fprotobuf_2fidentify_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto), true);
namespace identify {
namespace pb {

// ===================================================================

void Delta::InitAsDefaultInstance() {
}
class Delta::_Internal {
 public:
  using HasBits = decltype(std::declval<Delta>()._has_bits_);
};

Delta::Delta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:identify.pb.Delta)
}
Delta::Delta(const Delta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      added_protocols_(from.added_protocols_),
      rm_protocols_(from.rm_protocols_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:identify.pb.Delta)
}

void Delta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Delta_protocol_2fidentify_2fprotobuf_2fidentify_2eproto.base);
}

Delta::~Delta() {
  // @@protoc_insertion_point(destructor:identify.pb.Delta)
  SharedDtor();
}

void Delta::SharedDtor() {
}

void Delta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Delta& Delta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Delta_protocol_2fidentify_2fprotobuf_2fidentify_2eproto.base);
  return *internal_default_instance();
}


void Delta::Clear() {
// @@protoc_insertion_point(message_clear_start:identify.pb.Delta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  added_protocols_.Clear();
  rm_protocols_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Delta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string added_protocols = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_added_protocols();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "identify.pb.Delta.added_protocols");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string rm_protocols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rm_protocols();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "identify.pb.Delta.rm_protocols");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Delta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identify.pb.Delta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string added_protocols = 1;
  for (int i = 0, n = this->_internal_added_protocols_size(); i < n; i++) {
    const auto& s = this->_internal_added_protocols(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "identify.pb.Delta.added_protocols");
    target = stream->WriteString(1, s, target);
  }

  // repeated string rm_protocols = 2;
  for (int i = 0, n = this->_internal_rm_protocols_size(); i < n; i++) {
    const auto& s = this->_internal_rm_protocols(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "identify.pb.Delta.rm_protocols");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identify.pb.Delta)
  return target;
}

size_t Delta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identify.pb.Delta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string added_protocols = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(added_protocols_.size());
  for (int i = 0, n = added_protocols_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      added_protocols_.Get(i));
  }

  // repeated string rm_protocols = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rm_protocols_.size());
  for (int i = 0, n = rm_protocols_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rm_protocols_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Delta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:identify.pb.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Delta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:identify.pb.Delta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:identify.pb.Delta)
    MergeFrom(*source);
  }
}

void Delta::MergeFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:identify.pb.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  added_protocols_.MergeFrom(from.added_protocols_);
  rm_protocols_.MergeFrom(from.rm_protocols_);
}

void Delta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:identify.pb.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta::CopyFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identify.pb.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta::IsInitialized() const {
  return true;
}

void Delta::InternalSwap(Delta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  added_protocols_.InternalSwap(&other->added_protocols_);
  rm_protocols_.InternalSwap(&other->rm_protocols_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Delta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Identify::InitAsDefaultInstance() {
  ::identify::pb::_Identify_default_instance_._instance.get_mutable()->delta_ = const_cast< ::identify::pb::Delta*>(
      ::identify::pb::Delta::internal_default_instance());
}
class Identify::_Internal {
 public:
  using HasBits = decltype(std::declval<Identify>()._has_bits_);
  static void set_has_protocolversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_agentversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_publickey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_observedaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::identify::pb::Delta& delta(const Identify* msg);
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::identify::pb::Delta&
Identify::_Internal::delta(const Identify* msg) {
  return *msg->delta_;
}
Identify::Identify()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:identify.pb.Identify)
}
Identify::Identify(const Identify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      listenaddrs_(from.listenaddrs_),
      protocols_(from.protocols_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_publickey()) {
    publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  observedaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_observedaddr()) {
    observedaddr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.observedaddr_);
  }
  protocolversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_protocolversion()) {
    protocolversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocolversion_);
  }
  agentversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_agentversion()) {
    agentversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.agentversion_);
  }
  if (from._internal_has_delta()) {
    delta_ = new ::identify::pb::Delta(*from.delta_);
  } else {
    delta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:identify.pb.Identify)
}

void Identify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Identify_protocol_2fidentify_2fprotobuf_2fidentify_2eproto.base);
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  observedaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocolversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agentversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delta_ = nullptr;
}

Identify::~Identify() {
  // @@protoc_insertion_point(destructor:identify.pb.Identify)
  SharedDtor();
}

void Identify::SharedDtor() {
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  observedaddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocolversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agentversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete delta_;
}

void Identify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identify& Identify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identify_protocol_2fidentify_2fprotobuf_2fidentify_2eproto.base);
  return *internal_default_instance();
}


void Identify::Clear() {
// @@protoc_insertion_point(message_clear_start:identify.pb.Identify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listenaddrs_.Clear();
  protocols_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      publickey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      observedaddr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      protocolversion_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      agentversion_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(delta_ != nullptr);
      delta_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Identify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes publicKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes listenAddrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_listenaddrs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string protocols = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_protocols();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "identify.pb.Identify.protocols");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes observedAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_observedaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string protocolVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_protocolversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "identify.pb.Identify.protocolVersion");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string agentVersion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_agentversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "identify.pb.Identify.agentVersion");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .identify.pb.Delta delta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identify.pb.Identify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes publicKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_publickey(), target);
  }

  // repeated bytes listenAddrs = 2;
  for (int i = 0, n = this->_internal_listenaddrs_size(); i < n; i++) {
    const auto& s = this->_internal_listenaddrs(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated string protocols = 3;
  for (int i = 0, n = this->_internal_protocols_size(); i < n; i++) {
    const auto& s = this->_internal_protocols(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "identify.pb.Identify.protocols");
    target = stream->WriteString(3, s, target);
  }

  // optional bytes observedAddr = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_observedaddr(), target);
  }

  // optional string protocolVersion = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_protocolversion().data(), static_cast<int>(this->_internal_protocolversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "identify.pb.Identify.protocolVersion");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_protocolversion(), target);
  }

  // optional string agentVersion = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_agentversion().data(), static_cast<int>(this->_internal_agentversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "identify.pb.Identify.agentVersion");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_agentversion(), target);
  }

  // optional .identify.pb.Delta delta = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::delta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identify.pb.Identify)
  return target;
}

size_t Identify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identify.pb.Identify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes listenAddrs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(listenaddrs_.size());
  for (int i = 0, n = listenaddrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      listenaddrs_.Get(i));
  }

  // repeated string protocols = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(protocols_.size());
  for (int i = 0, n = protocols_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      protocols_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes publicKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_publickey());
    }

    // optional bytes observedAddr = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_observedaddr());
    }

    // optional string protocolVersion = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_protocolversion());
    }

    // optional string agentVersion = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_agentversion());
    }

    // optional .identify.pb.Delta delta = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delta_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:identify.pb.Identify)
  GOOGLE_DCHECK_NE(&from, this);
  const Identify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:identify.pb.Identify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:identify.pb.Identify)
    MergeFrom(*source);
  }
}

void Identify::MergeFrom(const Identify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:identify.pb.Identify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listenaddrs_.MergeFrom(from.listenaddrs_);
  protocols_.MergeFrom(from.protocols_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      observedaddr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.observedaddr_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      protocolversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocolversion_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      agentversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.agentversion_);
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_delta()->::identify::pb::Delta::MergeFrom(from._internal_delta());
    }
  }
}

void Identify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:identify.pb.Identify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identify::CopyFrom(const Identify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identify.pb.Identify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identify::IsInitialized() const {
  return true;
}

void Identify::InternalSwap(Identify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  listenaddrs_.InternalSwap(&other->listenaddrs_);
  protocols_.InternalSwap(&other->protocols_);
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  observedaddr_.Swap(&other->observedaddr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocolversion_.Swap(&other->protocolversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  agentversion_.Swap(&other->agentversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(delta_, other->delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identify::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace identify
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::identify::pb::Delta* Arena::CreateMaybeMessage< ::identify::pb::Delta >(Arena* arena) {
  return Arena::CreateInternal< ::identify::pb::Delta >(arena);
}
template<> PROTOBUF_NOINLINE ::identify::pb::Identify* Arena::CreateMaybeMessage< ::identify::pb::Identify >(Arena* arena) {
  return Arena::CreateInternal< ::identify::pb::Identify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
