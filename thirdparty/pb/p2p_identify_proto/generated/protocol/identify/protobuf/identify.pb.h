// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/identify/protobuf/identify.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fidentify_2fprotobuf_2fidentify_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fidentify_2fprotobuf_2fidentify_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fidentify_2fprotobuf_2fidentify_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fidentify_2fprotobuf_2fidentify_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto;
namespace identify {
namespace pb {
class Delta;
class DeltaDefaultTypeInternal;
extern DeltaDefaultTypeInternal _Delta_default_instance_;
class Identify;
class IdentifyDefaultTypeInternal;
extern IdentifyDefaultTypeInternal _Identify_default_instance_;
}  // namespace pb
}  // namespace identify
PROTOBUF_NAMESPACE_OPEN
template<> ::identify::pb::Delta* Arena::CreateMaybeMessage<::identify::pb::Delta>(Arena*);
template<> ::identify::pb::Identify* Arena::CreateMaybeMessage<::identify::pb::Identify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace identify {
namespace pb {

// ===================================================================

class Delta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:identify.pb.Delta) */ {
 public:
  Delta();
  virtual ~Delta();

  Delta(const Delta& from);
  Delta(Delta&& from) noexcept
    : Delta() {
    *this = ::std::move(from);
  }

  inline Delta& operator=(const Delta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Delta& operator=(Delta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Delta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Delta* internal_default_instance() {
    return reinterpret_cast<const Delta*>(
               &_Delta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Delta& a, Delta& b) {
    a.Swap(&b);
  }
  inline void Swap(Delta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Delta* New() const final {
    return CreateMaybeMessage<Delta>(nullptr);
  }

  Delta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Delta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Delta& from);
  void MergeFrom(const Delta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Delta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "identify.pb.Delta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto);
    return ::descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddedProtocolsFieldNumber = 1,
    kRmProtocolsFieldNumber = 2,
  };
  // repeated string added_protocols = 1;
  int added_protocols_size() const;
  private:
  int _internal_added_protocols_size() const;
  public:
  void clear_added_protocols();
  const std::string& added_protocols(int index) const;
  std::string* mutable_added_protocols(int index);
  void set_added_protocols(int index, const std::string& value);
  void set_added_protocols(int index, std::string&& value);
  void set_added_protocols(int index, const char* value);
  void set_added_protocols(int index, const char* value, size_t size);
  std::string* add_added_protocols();
  void add_added_protocols(const std::string& value);
  void add_added_protocols(std::string&& value);
  void add_added_protocols(const char* value);
  void add_added_protocols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& added_protocols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_added_protocols();
  private:
  const std::string& _internal_added_protocols(int index) const;
  std::string* _internal_add_added_protocols();
  public:

  // repeated string rm_protocols = 2;
  int rm_protocols_size() const;
  private:
  int _internal_rm_protocols_size() const;
  public:
  void clear_rm_protocols();
  const std::string& rm_protocols(int index) const;
  std::string* mutable_rm_protocols(int index);
  void set_rm_protocols(int index, const std::string& value);
  void set_rm_protocols(int index, std::string&& value);
  void set_rm_protocols(int index, const char* value);
  void set_rm_protocols(int index, const char* value, size_t size);
  std::string* add_rm_protocols();
  void add_rm_protocols(const std::string& value);
  void add_rm_protocols(std::string&& value);
  void add_rm_protocols(const char* value);
  void add_rm_protocols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rm_protocols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rm_protocols();
  private:
  const std::string& _internal_rm_protocols(int index) const;
  std::string* _internal_add_rm_protocols();
  public:

  // @@protoc_insertion_point(class_scope:identify.pb.Delta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> added_protocols_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rm_protocols_;
  friend struct ::TableStruct_protocol_2fidentify_2fprotobuf_2fidentify_2eproto;
};
// -------------------------------------------------------------------

class Identify :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:identify.pb.Identify) */ {
 public:
  Identify();
  virtual ~Identify();

  Identify(const Identify& from);
  Identify(Identify&& from) noexcept
    : Identify() {
    *this = ::std::move(from);
  }

  inline Identify& operator=(const Identify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identify& operator=(Identify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identify* internal_default_instance() {
    return reinterpret_cast<const Identify*>(
               &_Identify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Identify& a, Identify& b) {
    a.Swap(&b);
  }
  inline void Swap(Identify* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identify* New() const final {
    return CreateMaybeMessage<Identify>(nullptr);
  }

  Identify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identify& from);
  void MergeFrom(const Identify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "identify.pb.Identify";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto);
    return ::descriptor_table_protocol_2fidentify_2fprotobuf_2fidentify_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenAddrsFieldNumber = 2,
    kProtocolsFieldNumber = 3,
    kPublicKeyFieldNumber = 1,
    kObservedAddrFieldNumber = 4,
    kProtocolVersionFieldNumber = 5,
    kAgentVersionFieldNumber = 6,
    kDeltaFieldNumber = 7,
  };
  // repeated bytes listenAddrs = 2;
  int listenaddrs_size() const;
  private:
  int _internal_listenaddrs_size() const;
  public:
  void clear_listenaddrs();
  const std::string& listenaddrs(int index) const;
  std::string* mutable_listenaddrs(int index);
  void set_listenaddrs(int index, const std::string& value);
  void set_listenaddrs(int index, std::string&& value);
  void set_listenaddrs(int index, const char* value);
  void set_listenaddrs(int index, const void* value, size_t size);
  std::string* add_listenaddrs();
  void add_listenaddrs(const std::string& value);
  void add_listenaddrs(std::string&& value);
  void add_listenaddrs(const char* value);
  void add_listenaddrs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& listenaddrs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_listenaddrs();
  private:
  const std::string& _internal_listenaddrs(int index) const;
  std::string* _internal_add_listenaddrs();
  public:

  // repeated string protocols = 3;
  int protocols_size() const;
  private:
  int _internal_protocols_size() const;
  public:
  void clear_protocols();
  const std::string& protocols(int index) const;
  std::string* mutable_protocols(int index);
  void set_protocols(int index, const std::string& value);
  void set_protocols(int index, std::string&& value);
  void set_protocols(int index, const char* value);
  void set_protocols(int index, const char* value, size_t size);
  std::string* add_protocols();
  void add_protocols(const std::string& value);
  void add_protocols(std::string&& value);
  void add_protocols(const char* value);
  void add_protocols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& protocols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_protocols();
  private:
  const std::string& _internal_protocols(int index) const;
  std::string* _internal_add_protocols();
  public:

  // optional bytes publicKey = 1;
  bool has_publickey() const;
  private:
  bool _internal_has_publickey() const;
  public:
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // optional bytes observedAddr = 4;
  bool has_observedaddr() const;
  private:
  bool _internal_has_observedaddr() const;
  public:
  void clear_observedaddr();
  const std::string& observedaddr() const;
  void set_observedaddr(const std::string& value);
  void set_observedaddr(std::string&& value);
  void set_observedaddr(const char* value);
  void set_observedaddr(const void* value, size_t size);
  std::string* mutable_observedaddr();
  std::string* release_observedaddr();
  void set_allocated_observedaddr(std::string* observedaddr);
  private:
  const std::string& _internal_observedaddr() const;
  void _internal_set_observedaddr(const std::string& value);
  std::string* _internal_mutable_observedaddr();
  public:

  // optional string protocolVersion = 5;
  bool has_protocolversion() const;
  private:
  bool _internal_has_protocolversion() const;
  public:
  void clear_protocolversion();
  const std::string& protocolversion() const;
  void set_protocolversion(const std::string& value);
  void set_protocolversion(std::string&& value);
  void set_protocolversion(const char* value);
  void set_protocolversion(const char* value, size_t size);
  std::string* mutable_protocolversion();
  std::string* release_protocolversion();
  void set_allocated_protocolversion(std::string* protocolversion);
  private:
  const std::string& _internal_protocolversion() const;
  void _internal_set_protocolversion(const std::string& value);
  std::string* _internal_mutable_protocolversion();
  public:

  // optional string agentVersion = 6;
  bool has_agentversion() const;
  private:
  bool _internal_has_agentversion() const;
  public:
  void clear_agentversion();
  const std::string& agentversion() const;
  void set_agentversion(const std::string& value);
  void set_agentversion(std::string&& value);
  void set_agentversion(const char* value);
  void set_agentversion(const char* value, size_t size);
  std::string* mutable_agentversion();
  std::string* release_agentversion();
  void set_allocated_agentversion(std::string* agentversion);
  private:
  const std::string& _internal_agentversion() const;
  void _internal_set_agentversion(const std::string& value);
  std::string* _internal_mutable_agentversion();
  public:

  // optional .identify.pb.Delta delta = 7;
  bool has_delta() const;
  private:
  bool _internal_has_delta() const;
  public:
  void clear_delta();
  const ::identify::pb::Delta& delta() const;
  ::identify::pb::Delta* release_delta();
  ::identify::pb::Delta* mutable_delta();
  void set_allocated_delta(::identify::pb::Delta* delta);
  private:
  const ::identify::pb::Delta& _internal_delta() const;
  ::identify::pb::Delta* _internal_mutable_delta();
  public:

  // @@protoc_insertion_point(class_scope:identify.pb.Identify)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> listenaddrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> protocols_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr observedaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocolversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agentversion_;
  ::identify::pb::Delta* delta_;
  friend struct ::TableStruct_protocol_2fidentify_2fprotobuf_2fidentify_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Delta

// repeated string added_protocols = 1;
inline int Delta::_internal_added_protocols_size() const {
  return added_protocols_.size();
}
inline int Delta::added_protocols_size() const {
  return _internal_added_protocols_size();
}
inline void Delta::clear_added_protocols() {
  added_protocols_.Clear();
}
inline std::string* Delta::add_added_protocols() {
  // @@protoc_insertion_point(field_add_mutable:identify.pb.Delta.added_protocols)
  return _internal_add_added_protocols();
}
inline const std::string& Delta::_internal_added_protocols(int index) const {
  return added_protocols_.Get(index);
}
inline const std::string& Delta::added_protocols(int index) const {
  // @@protoc_insertion_point(field_get:identify.pb.Delta.added_protocols)
  return _internal_added_protocols(index);
}
inline std::string* Delta::mutable_added_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:identify.pb.Delta.added_protocols)
  return added_protocols_.Mutable(index);
}
inline void Delta::set_added_protocols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:identify.pb.Delta.added_protocols)
  added_protocols_.Mutable(index)->assign(value);
}
inline void Delta::set_added_protocols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:identify.pb.Delta.added_protocols)
  added_protocols_.Mutable(index)->assign(std::move(value));
}
inline void Delta::set_added_protocols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  added_protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:identify.pb.Delta.added_protocols)
}
inline void Delta::set_added_protocols(int index, const char* value, size_t size) {
  added_protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:identify.pb.Delta.added_protocols)
}
inline std::string* Delta::_internal_add_added_protocols() {
  return added_protocols_.Add();
}
inline void Delta::add_added_protocols(const std::string& value) {
  added_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:identify.pb.Delta.added_protocols)
}
inline void Delta::add_added_protocols(std::string&& value) {
  added_protocols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:identify.pb.Delta.added_protocols)
}
inline void Delta::add_added_protocols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  added_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:identify.pb.Delta.added_protocols)
}
inline void Delta::add_added_protocols(const char* value, size_t size) {
  added_protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:identify.pb.Delta.added_protocols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Delta::added_protocols() const {
  // @@protoc_insertion_point(field_list:identify.pb.Delta.added_protocols)
  return added_protocols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Delta::mutable_added_protocols() {
  // @@protoc_insertion_point(field_mutable_list:identify.pb.Delta.added_protocols)
  return &added_protocols_;
}

// repeated string rm_protocols = 2;
inline int Delta::_internal_rm_protocols_size() const {
  return rm_protocols_.size();
}
inline int Delta::rm_protocols_size() const {
  return _internal_rm_protocols_size();
}
inline void Delta::clear_rm_protocols() {
  rm_protocols_.Clear();
}
inline std::string* Delta::add_rm_protocols() {
  // @@protoc_insertion_point(field_add_mutable:identify.pb.Delta.rm_protocols)
  return _internal_add_rm_protocols();
}
inline const std::string& Delta::_internal_rm_protocols(int index) const {
  return rm_protocols_.Get(index);
}
inline const std::string& Delta::rm_protocols(int index) const {
  // @@protoc_insertion_point(field_get:identify.pb.Delta.rm_protocols)
  return _internal_rm_protocols(index);
}
inline std::string* Delta::mutable_rm_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:identify.pb.Delta.rm_protocols)
  return rm_protocols_.Mutable(index);
}
inline void Delta::set_rm_protocols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:identify.pb.Delta.rm_protocols)
  rm_protocols_.Mutable(index)->assign(value);
}
inline void Delta::set_rm_protocols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:identify.pb.Delta.rm_protocols)
  rm_protocols_.Mutable(index)->assign(std::move(value));
}
inline void Delta::set_rm_protocols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rm_protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:identify.pb.Delta.rm_protocols)
}
inline void Delta::set_rm_protocols(int index, const char* value, size_t size) {
  rm_protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:identify.pb.Delta.rm_protocols)
}
inline std::string* Delta::_internal_add_rm_protocols() {
  return rm_protocols_.Add();
}
inline void Delta::add_rm_protocols(const std::string& value) {
  rm_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:identify.pb.Delta.rm_protocols)
}
inline void Delta::add_rm_protocols(std::string&& value) {
  rm_protocols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:identify.pb.Delta.rm_protocols)
}
inline void Delta::add_rm_protocols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rm_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:identify.pb.Delta.rm_protocols)
}
inline void Delta::add_rm_protocols(const char* value, size_t size) {
  rm_protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:identify.pb.Delta.rm_protocols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Delta::rm_protocols() const {
  // @@protoc_insertion_point(field_list:identify.pb.Delta.rm_protocols)
  return rm_protocols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Delta::mutable_rm_protocols() {
  // @@protoc_insertion_point(field_mutable_list:identify.pb.Delta.rm_protocols)
  return &rm_protocols_;
}

// -------------------------------------------------------------------

// Identify

// optional string protocolVersion = 5;
inline bool Identify::_internal_has_protocolversion() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Identify::has_protocolversion() const {
  return _internal_has_protocolversion();
}
inline void Identify::clear_protocolversion() {
  protocolversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Identify::protocolversion() const {
  // @@protoc_insertion_point(field_get:identify.pb.Identify.protocolVersion)
  return _internal_protocolversion();
}
inline void Identify::set_protocolversion(const std::string& value) {
  _internal_set_protocolversion(value);
  // @@protoc_insertion_point(field_set:identify.pb.Identify.protocolVersion)
}
inline std::string* Identify::mutable_protocolversion() {
  // @@protoc_insertion_point(field_mutable:identify.pb.Identify.protocolVersion)
  return _internal_mutable_protocolversion();
}
inline const std::string& Identify::_internal_protocolversion() const {
  return protocolversion_.GetNoArena();
}
inline void Identify::_internal_set_protocolversion(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  protocolversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Identify::set_protocolversion(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  protocolversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:identify.pb.Identify.protocolVersion)
}
inline void Identify::set_protocolversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  protocolversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:identify.pb.Identify.protocolVersion)
}
inline void Identify::set_protocolversion(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  protocolversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:identify.pb.Identify.protocolVersion)
}
inline std::string* Identify::_internal_mutable_protocolversion() {
  _has_bits_[0] |= 0x00000004u;
  return protocolversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Identify::release_protocolversion() {
  // @@protoc_insertion_point(field_release:identify.pb.Identify.protocolVersion)
  if (!_internal_has_protocolversion()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return protocolversion_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Identify::set_allocated_protocolversion(std::string* protocolversion) {
  if (protocolversion != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  protocolversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocolversion);
  // @@protoc_insertion_point(field_set_allocated:identify.pb.Identify.protocolVersion)
}

// optional string agentVersion = 6;
inline bool Identify::_internal_has_agentversion() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Identify::has_agentversion() const {
  return _internal_has_agentversion();
}
inline void Identify::clear_agentversion() {
  agentversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Identify::agentversion() const {
  // @@protoc_insertion_point(field_get:identify.pb.Identify.agentVersion)
  return _internal_agentversion();
}
inline void Identify::set_agentversion(const std::string& value) {
  _internal_set_agentversion(value);
  // @@protoc_insertion_point(field_set:identify.pb.Identify.agentVersion)
}
inline std::string* Identify::mutable_agentversion() {
  // @@protoc_insertion_point(field_mutable:identify.pb.Identify.agentVersion)
  return _internal_mutable_agentversion();
}
inline const std::string& Identify::_internal_agentversion() const {
  return agentversion_.GetNoArena();
}
inline void Identify::_internal_set_agentversion(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  agentversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Identify::set_agentversion(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  agentversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:identify.pb.Identify.agentVersion)
}
inline void Identify::set_agentversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  agentversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:identify.pb.Identify.agentVersion)
}
inline void Identify::set_agentversion(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  agentversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:identify.pb.Identify.agentVersion)
}
inline std::string* Identify::_internal_mutable_agentversion() {
  _has_bits_[0] |= 0x00000008u;
  return agentversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Identify::release_agentversion() {
  // @@protoc_insertion_point(field_release:identify.pb.Identify.agentVersion)
  if (!_internal_has_agentversion()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return agentversion_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Identify::set_allocated_agentversion(std::string* agentversion) {
  if (agentversion != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  agentversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agentversion);
  // @@protoc_insertion_point(field_set_allocated:identify.pb.Identify.agentVersion)
}

// optional bytes publicKey = 1;
inline bool Identify::_internal_has_publickey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Identify::has_publickey() const {
  return _internal_has_publickey();
}
inline void Identify::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Identify::publickey() const {
  // @@protoc_insertion_point(field_get:identify.pb.Identify.publicKey)
  return _internal_publickey();
}
inline void Identify::set_publickey(const std::string& value) {
  _internal_set_publickey(value);
  // @@protoc_insertion_point(field_set:identify.pb.Identify.publicKey)
}
inline std::string* Identify::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:identify.pb.Identify.publicKey)
  return _internal_mutable_publickey();
}
inline const std::string& Identify::_internal_publickey() const {
  return publickey_.GetNoArena();
}
inline void Identify::_internal_set_publickey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Identify::set_publickey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  publickey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:identify.pb.Identify.publicKey)
}
inline void Identify::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:identify.pb.Identify.publicKey)
}
inline void Identify::set_publickey(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:identify.pb.Identify.publicKey)
}
inline std::string* Identify::_internal_mutable_publickey() {
  _has_bits_[0] |= 0x00000001u;
  return publickey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Identify::release_publickey() {
  // @@protoc_insertion_point(field_release:identify.pb.Identify.publicKey)
  if (!_internal_has_publickey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return publickey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Identify::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  publickey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:identify.pb.Identify.publicKey)
}

// repeated bytes listenAddrs = 2;
inline int Identify::_internal_listenaddrs_size() const {
  return listenaddrs_.size();
}
inline int Identify::listenaddrs_size() const {
  return _internal_listenaddrs_size();
}
inline void Identify::clear_listenaddrs() {
  listenaddrs_.Clear();
}
inline std::string* Identify::add_listenaddrs() {
  // @@protoc_insertion_point(field_add_mutable:identify.pb.Identify.listenAddrs)
  return _internal_add_listenaddrs();
}
inline const std::string& Identify::_internal_listenaddrs(int index) const {
  return listenaddrs_.Get(index);
}
inline const std::string& Identify::listenaddrs(int index) const {
  // @@protoc_insertion_point(field_get:identify.pb.Identify.listenAddrs)
  return _internal_listenaddrs(index);
}
inline std::string* Identify::mutable_listenaddrs(int index) {
  // @@protoc_insertion_point(field_mutable:identify.pb.Identify.listenAddrs)
  return listenaddrs_.Mutable(index);
}
inline void Identify::set_listenaddrs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:identify.pb.Identify.listenAddrs)
  listenaddrs_.Mutable(index)->assign(value);
}
inline void Identify::set_listenaddrs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:identify.pb.Identify.listenAddrs)
  listenaddrs_.Mutable(index)->assign(std::move(value));
}
inline void Identify::set_listenaddrs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listenaddrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:identify.pb.Identify.listenAddrs)
}
inline void Identify::set_listenaddrs(int index, const void* value, size_t size) {
  listenaddrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:identify.pb.Identify.listenAddrs)
}
inline std::string* Identify::_internal_add_listenaddrs() {
  return listenaddrs_.Add();
}
inline void Identify::add_listenaddrs(const std::string& value) {
  listenaddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:identify.pb.Identify.listenAddrs)
}
inline void Identify::add_listenaddrs(std::string&& value) {
  listenaddrs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:identify.pb.Identify.listenAddrs)
}
inline void Identify::add_listenaddrs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listenaddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:identify.pb.Identify.listenAddrs)
}
inline void Identify::add_listenaddrs(const void* value, size_t size) {
  listenaddrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:identify.pb.Identify.listenAddrs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Identify::listenaddrs() const {
  // @@protoc_insertion_point(field_list:identify.pb.Identify.listenAddrs)
  return listenaddrs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Identify::mutable_listenaddrs() {
  // @@protoc_insertion_point(field_mutable_list:identify.pb.Identify.listenAddrs)
  return &listenaddrs_;
}

// optional bytes observedAddr = 4;
inline bool Identify::_internal_has_observedaddr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Identify::has_observedaddr() const {
  return _internal_has_observedaddr();
}
inline void Identify::clear_observedaddr() {
  observedaddr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Identify::observedaddr() const {
  // @@protoc_insertion_point(field_get:identify.pb.Identify.observedAddr)
  return _internal_observedaddr();
}
inline void Identify::set_observedaddr(const std::string& value) {
  _internal_set_observedaddr(value);
  // @@protoc_insertion_point(field_set:identify.pb.Identify.observedAddr)
}
inline std::string* Identify::mutable_observedaddr() {
  // @@protoc_insertion_point(field_mutable:identify.pb.Identify.observedAddr)
  return _internal_mutable_observedaddr();
}
inline const std::string& Identify::_internal_observedaddr() const {
  return observedaddr_.GetNoArena();
}
inline void Identify::_internal_set_observedaddr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  observedaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Identify::set_observedaddr(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  observedaddr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:identify.pb.Identify.observedAddr)
}
inline void Identify::set_observedaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  observedaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:identify.pb.Identify.observedAddr)
}
inline void Identify::set_observedaddr(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  observedaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:identify.pb.Identify.observedAddr)
}
inline std::string* Identify::_internal_mutable_observedaddr() {
  _has_bits_[0] |= 0x00000002u;
  return observedaddr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Identify::release_observedaddr() {
  // @@protoc_insertion_point(field_release:identify.pb.Identify.observedAddr)
  if (!_internal_has_observedaddr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return observedaddr_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Identify::set_allocated_observedaddr(std::string* observedaddr) {
  if (observedaddr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  observedaddr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), observedaddr);
  // @@protoc_insertion_point(field_set_allocated:identify.pb.Identify.observedAddr)
}

// repeated string protocols = 3;
inline int Identify::_internal_protocols_size() const {
  return protocols_.size();
}
inline int Identify::protocols_size() const {
  return _internal_protocols_size();
}
inline void Identify::clear_protocols() {
  protocols_.Clear();
}
inline std::string* Identify::add_protocols() {
  // @@protoc_insertion_point(field_add_mutable:identify.pb.Identify.protocols)
  return _internal_add_protocols();
}
inline const std::string& Identify::_internal_protocols(int index) const {
  return protocols_.Get(index);
}
inline const std::string& Identify::protocols(int index) const {
  // @@protoc_insertion_point(field_get:identify.pb.Identify.protocols)
  return _internal_protocols(index);
}
inline std::string* Identify::mutable_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:identify.pb.Identify.protocols)
  return protocols_.Mutable(index);
}
inline void Identify::set_protocols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:identify.pb.Identify.protocols)
  protocols_.Mutable(index)->assign(value);
}
inline void Identify::set_protocols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:identify.pb.Identify.protocols)
  protocols_.Mutable(index)->assign(std::move(value));
}
inline void Identify::set_protocols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:identify.pb.Identify.protocols)
}
inline void Identify::set_protocols(int index, const char* value, size_t size) {
  protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:identify.pb.Identify.protocols)
}
inline std::string* Identify::_internal_add_protocols() {
  return protocols_.Add();
}
inline void Identify::add_protocols(const std::string& value) {
  protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:identify.pb.Identify.protocols)
}
inline void Identify::add_protocols(std::string&& value) {
  protocols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:identify.pb.Identify.protocols)
}
inline void Identify::add_protocols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:identify.pb.Identify.protocols)
}
inline void Identify::add_protocols(const char* value, size_t size) {
  protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:identify.pb.Identify.protocols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Identify::protocols() const {
  // @@protoc_insertion_point(field_list:identify.pb.Identify.protocols)
  return protocols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Identify::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_list:identify.pb.Identify.protocols)
  return &protocols_;
}

// optional .identify.pb.Delta delta = 7;
inline bool Identify::_internal_has_delta() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || delta_ != nullptr);
  return value;
}
inline bool Identify::has_delta() const {
  return _internal_has_delta();
}
inline void Identify::clear_delta() {
  if (delta_ != nullptr) delta_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::identify::pb::Delta& Identify::_internal_delta() const {
  const ::identify::pb::Delta* p = delta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::identify::pb::Delta*>(
      &::identify::pb::_Delta_default_instance_);
}
inline const ::identify::pb::Delta& Identify::delta() const {
  // @@protoc_insertion_point(field_get:identify.pb.Identify.delta)
  return _internal_delta();
}
inline ::identify::pb::Delta* Identify::release_delta() {
  // @@protoc_insertion_point(field_release:identify.pb.Identify.delta)
  _has_bits_[0] &= ~0x00000010u;
  ::identify::pb::Delta* temp = delta_;
  delta_ = nullptr;
  return temp;
}
inline ::identify::pb::Delta* Identify::_internal_mutable_delta() {
  _has_bits_[0] |= 0x00000010u;
  if (delta_ == nullptr) {
    auto* p = CreateMaybeMessage<::identify::pb::Delta>(GetArenaNoVirtual());
    delta_ = p;
  }
  return delta_;
}
inline ::identify::pb::Delta* Identify::mutable_delta() {
  // @@protoc_insertion_point(field_mutable:identify.pb.Identify.delta)
  return _internal_mutable_delta();
}
inline void Identify::set_allocated_delta(::identify::pb::Delta* delta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete delta_;
  }
  if (delta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  delta_ = delta;
  // @@protoc_insertion_point(field_set_allocated:identify.pb.Identify.delta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace identify

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fidentify_2fprotobuf_2fidentify_2eproto
