// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/kademlia/protobuf/kademlia.proto

#include "protocol/kademlia/protobuf/kademlia.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_Peer_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Record_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto;
namespace libp2p {
namespace protocol {
namespace kademlia {
namespace pb {
class RecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Record> _instance;
} _Record_default_instance_;
class Message_PeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_Peer> _instance;
} _Message_Peer_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
}  // namespace pb
}  // namespace kademlia
}  // namespace protocol
}  // namespace libp2p
static void InitDefaultsscc_info_Message_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libp2p::protocol::kademlia::pb::_Message_default_instance_;
    new (ptr) ::libp2p::protocol::kademlia::pb::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libp2p::protocol::kademlia::pb::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Message_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Message_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto}, {
      &scc_info_Record_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base,
      &scc_info_Message_Peer_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base,}};

static void InitDefaultsscc_info_Message_Peer_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libp2p::protocol::kademlia::pb::_Message_Peer_default_instance_;
    new (ptr) ::libp2p::protocol::kademlia::pb::Message_Peer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libp2p::protocol::kademlia::pb::Message_Peer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_Peer_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_Peer_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto}, {}};

static void InitDefaultsscc_info_Record_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libp2p::protocol::kademlia::pb::_Record_default_instance_;
    new (ptr) ::libp2p::protocol::kademlia::pb::Record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libp2p::protocol::kademlia::pb::Record::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Record_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Record_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Record, key_),
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Record, value_),
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Record, timereceived_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message_Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message_Peer, id_),
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message_Peer, addrs_),
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message_Peer, connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message, type_),
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message, clusterlevelraw_),
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message, key_),
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message, record_),
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message, closerpeers_),
  PROTOBUF_FIELD_OFFSET(::libp2p::protocol::kademlia::pb::Message, providerpeers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::libp2p::protocol::kademlia::pb::Record)},
  { 8, -1, sizeof(::libp2p::protocol::kademlia::pb::Message_Peer)},
  { 16, -1, sizeof(::libp2p::protocol::kademlia::pb::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libp2p::protocol::kademlia::pb::_Record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libp2p::protocol::kademlia::pb::_Message_Peer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libp2p::protocol::kademlia::pb::_Message_default_instance_),
};

const char descriptor_table_protodef_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)protocol/kademlia/protobuf/kademlia.pr"
  "oto\022\033libp2p.protocol.kademlia.pb\":\n\006Reco"
  "rd\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\024\n\014timeRe"
  "ceived\030\005 \001(\t\"\326\004\n\007Message\022>\n\004type\030\001 \001(\01620"
  ".libp2p.protocol.kademlia.pb.Message.Mes"
  "sageType\022\027\n\017clusterLevelRaw\030\n \001(\005\022\013\n\003key"
  "\030\002 \001(\014\0223\n\006record\030\003 \001(\0132#.libp2p.protocol"
  ".kademlia.pb.Record\022>\n\013closerPeers\030\010 \003(\013"
  "2).libp2p.protocol.kademlia.pb.Message.P"
  "eer\022@\n\rproviderPeers\030\t \003(\0132).libp2p.prot"
  "ocol.kademlia.pb.Message.Peer\032j\n\004Peer\022\n\n"
  "\002id\030\001 \001(\014\022\r\n\005addrs\030\002 \003(\014\022G\n\nconnection\030\003"
  " \001(\01623.libp2p.protocol.kademlia.pb.Messa"
  "ge.ConnectionType\"i\n\013MessageType\022\r\n\tPUT_"
  "VALUE\020\000\022\r\n\tGET_VALUE\020\001\022\020\n\014ADD_PROVIDER\020\002"
  "\022\021\n\rGET_PROVIDERS\020\003\022\r\n\tFIND_NODE\020\004\022\010\n\004PI"
  "NG\020\005\"W\n\016ConnectionType\022\021\n\rNOT_CONNECTED\020"
  "\000\022\r\n\tCONNECTED\020\001\022\017\n\013CAN_CONNECT\020\002\022\022\n\016CAN"
  "NOT_CONNECT\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto_sccs[3] = {
  &scc_info_Message_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base,
  &scc_info_Message_Peer_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base,
  &scc_info_Record_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto_once;
static bool descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto = {
  &descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto_initialized, descriptor_table_protodef_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto, "protocol/kademlia/protobuf/kademlia.proto", 741,
  &descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto_once, descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto_sccs, descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto::offsets,
  file_level_metadata_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto, 3, file_level_enum_descriptors_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto, file_level_service_descriptors_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto), true);
namespace libp2p {
namespace protocol {
namespace kademlia {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto);
  return file_level_enum_descriptors_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto[0];
}
bool Message_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Message_MessageType Message::PUT_VALUE;
constexpr Message_MessageType Message::GET_VALUE;
constexpr Message_MessageType Message::ADD_PROVIDER;
constexpr Message_MessageType Message::GET_PROVIDERS;
constexpr Message_MessageType Message::FIND_NODE;
constexpr Message_MessageType Message::PING;
constexpr Message_MessageType Message::MessageType_MIN;
constexpr Message_MessageType Message::MessageType_MAX;
constexpr int Message::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ConnectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto);
  return file_level_enum_descriptors_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto[1];
}
bool Message_ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Message_ConnectionType Message::NOT_CONNECTED;
constexpr Message_ConnectionType Message::CONNECTED;
constexpr Message_ConnectionType Message::CAN_CONNECT;
constexpr Message_ConnectionType Message::CANNOT_CONNECT;
constexpr Message_ConnectionType Message::ConnectionType_MIN;
constexpr Message_ConnectionType Message::ConnectionType_MAX;
constexpr int Message::ConnectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Record::InitAsDefaultInstance() {
}
class Record::_Internal {
 public:
};

Record::Record()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libp2p.protocol.kademlia.pb.Record)
}
Record::Record(const Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  timereceived_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timereceived().empty()) {
    timereceived_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timereceived_);
  }
  // @@protoc_insertion_point(copy_constructor:libp2p.protocol.kademlia.pb.Record)
}

void Record::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Record_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timereceived_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:libp2p.protocol.kademlia.pb.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timereceived_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Record& Record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Record_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base);
  return *internal_default_instance();
}


void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:libp2p.protocol.kademlia.pb.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timereceived_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timeReceived = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_timereceived();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "libp2p.protocol.kademlia.pb.Record.timeReceived"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:libp2p.protocol.kademlia.pb.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string timeReceived = 5;
  if (this->timereceived().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timereceived().data(), static_cast<int>(this->_internal_timereceived().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "libp2p.protocol.kademlia.pb.Record.timeReceived");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_timereceived(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libp2p.protocol.kademlia.pb.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libp2p.protocol.kademlia.pb.Record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // string timeReceived = 5;
  if (this->timereceived().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timereceived());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libp2p.protocol.kademlia.pb.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libp2p.protocol.kademlia.pb.Record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libp2p.protocol.kademlia.pb.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libp2p.protocol.kademlia.pb.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.timereceived().size() > 0) {

    timereceived_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timereceived_);
  }
}

void Record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libp2p.protocol.kademlia.pb.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libp2p.protocol.kademlia.pb.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::InternalSwap(Record* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timereceived_.Swap(&other->timereceived_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_Peer::InitAsDefaultInstance() {
}
class Message_Peer::_Internal {
 public:
};

Message_Peer::Message_Peer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libp2p.protocol.kademlia.pb.Message.Peer)
}
Message_Peer::Message_Peer(const Message_Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  connection_ = from.connection_;
  // @@protoc_insertion_point(copy_constructor:libp2p.protocol.kademlia.pb.Message.Peer)
}

void Message_Peer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_Peer_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connection_ = 0;
}

Message_Peer::~Message_Peer() {
  // @@protoc_insertion_point(destructor:libp2p.protocol.kademlia.pb.Message.Peer)
  SharedDtor();
}

void Message_Peer::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message_Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_Peer& Message_Peer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_Peer_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base);
  return *internal_default_instance();
}


void Message_Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:libp2p.protocol.kademlia.pb.Message.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrs_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connection_ = 0;
  _internal_metadata_.Clear();
}

const char* Message_Peer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes addrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addrs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .libp2p.protocol.kademlia.pb.Message.ConnectionType connection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_connection(static_cast<::libp2p::protocol::kademlia::pb::Message_ConnectionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_Peer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:libp2p.protocol.kademlia.pb.Message.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated bytes addrs = 2;
  for (int i = 0, n = this->_internal_addrs_size(); i < n; i++) {
    const auto& s = this->_internal_addrs(i);
    target = stream->WriteBytes(2, s, target);
  }

  // .libp2p.protocol.kademlia.pb.Message.ConnectionType connection = 3;
  if (this->connection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_connection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libp2p.protocol.kademlia.pb.Message.Peer)
  return target;
}

size_t Message_Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libp2p.protocol.kademlia.pb.Message.Peer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes addrs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addrs_.size());
  for (int i = 0, n = addrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      addrs_.Get(i));
  }

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // .libp2p.protocol.kademlia.pb.Message.ConnectionType connection = 3;
  if (this->connection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connection());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_Peer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libp2p.protocol.kademlia.pb.Message.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_Peer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_Peer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libp2p.protocol.kademlia.pb.Message.Peer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libp2p.protocol.kademlia.pb.Message.Peer)
    MergeFrom(*source);
  }
}

void Message_Peer::MergeFrom(const Message_Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libp2p.protocol.kademlia.pb.Message.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_.MergeFrom(from.addrs_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.connection() != 0) {
    _internal_set_connection(from._internal_connection());
  }
}

void Message_Peer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libp2p.protocol.kademlia.pb.Message.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Peer::CopyFrom(const Message_Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libp2p.protocol.kademlia.pb.Message.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Peer::IsInitialized() const {
  return true;
}

void Message_Peer::InternalSwap(Message_Peer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addrs_.InternalSwap(&other->addrs_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connection_, other->connection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_Peer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::libp2p::protocol::kademlia::pb::_Message_default_instance_._instance.get_mutable()->record_ = const_cast< ::libp2p::protocol::kademlia::pb::Record*>(
      ::libp2p::protocol::kademlia::pb::Record::internal_default_instance());
}
class Message::_Internal {
 public:
  static const ::libp2p::protocol::kademlia::pb::Record& record(const Message* msg);
};

const ::libp2p::protocol::kademlia::pb::Record&
Message::_Internal::record(const Message* msg) {
  return *msg->record_;
}
Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libp2p.protocol.kademlia.pb.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      closerpeers_(from.closerpeers_),
      providerpeers_(from.providerpeers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from._internal_has_record()) {
    record_ = new ::libp2p::protocol::kademlia::pb::Record(*from.record_);
  } else {
    record_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&clusterlevelraw_) -
    reinterpret_cast<char*>(&type_)) + sizeof(clusterlevelraw_));
  // @@protoc_insertion_point(copy_constructor:libp2p.protocol.kademlia.pb.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clusterlevelraw_) -
      reinterpret_cast<char*>(&record_)) + sizeof(clusterlevelraw_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:libp2p.protocol.kademlia.pb.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete record_;
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_protocol_2fkademlia_2fprotobuf_2fkademlia_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:libp2p.protocol.kademlia.pb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  closerpeers_.Clear();
  providerpeers_.Clear();
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clusterlevelraw_) -
      reinterpret_cast<char*>(&type_)) + sizeof(clusterlevelraw_));
  _internal_metadata_.Clear();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .libp2p.protocol.kademlia.pb.Message.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::libp2p::protocol::kademlia::pb::Message_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .libp2p.protocol.kademlia.pb.Record record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .libp2p.protocol.kademlia.pb.Message.Peer closerPeers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_closerpeers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .libp2p.protocol.kademlia.pb.Message.Peer providerPeers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_providerpeers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 clusterLevelRaw = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          clusterlevelraw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:libp2p.protocol.kademlia.pb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .libp2p.protocol.kademlia.pb.Message.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // .libp2p.protocol.kademlia.pb.Record record = 3;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::record(this), target, stream);
  }

  // repeated .libp2p.protocol.kademlia.pb.Message.Peer closerPeers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_closerpeers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_closerpeers(i), target, stream);
  }

  // repeated .libp2p.protocol.kademlia.pb.Message.Peer providerPeers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_providerpeers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_providerpeers(i), target, stream);
  }

  // int32 clusterLevelRaw = 10;
  if (this->clusterlevelraw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_clusterlevelraw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libp2p.protocol.kademlia.pb.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libp2p.protocol.kademlia.pb.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .libp2p.protocol.kademlia.pb.Message.Peer closerPeers = 8;
  total_size += 1UL * this->_internal_closerpeers_size();
  for (const auto& msg : this->closerpeers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .libp2p.protocol.kademlia.pb.Message.Peer providerPeers = 9;
  total_size += 1UL * this->_internal_providerpeers_size();
  for (const auto& msg : this->providerpeers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .libp2p.protocol.kademlia.pb.Record record = 3;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  // .libp2p.protocol.kademlia.pb.Message.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 clusterLevelRaw = 10;
  if (this->clusterlevelraw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clusterlevelraw());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libp2p.protocol.kademlia.pb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libp2p.protocol.kademlia.pb.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libp2p.protocol.kademlia.pb.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libp2p.protocol.kademlia.pb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  closerpeers_.MergeFrom(from.closerpeers_);
  providerpeers_.MergeFrom(from.providerpeers_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_record()) {
    _internal_mutable_record()->::libp2p::protocol::kademlia::pb::Record::MergeFrom(from._internal_record());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.clusterlevelraw() != 0) {
    _internal_set_clusterlevelraw(from._internal_clusterlevelraw());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libp2p.protocol.kademlia.pb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libp2p.protocol.kademlia.pb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  closerpeers_.InternalSwap(&other->closerpeers_);
  providerpeers_.InternalSwap(&other->providerpeers_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(record_, other->record_);
  swap(type_, other->type_);
  swap(clusterlevelraw_, other->clusterlevelraw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace kademlia
}  // namespace protocol
}  // namespace libp2p
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::libp2p::protocol::kademlia::pb::Record* Arena::CreateMaybeMessage< ::libp2p::protocol::kademlia::pb::Record >(Arena* arena) {
  return Arena::CreateInternal< ::libp2p::protocol::kademlia::pb::Record >(arena);
}
template<> PROTOBUF_NOINLINE ::libp2p::protocol::kademlia::pb::Message_Peer* Arena::CreateMaybeMessage< ::libp2p::protocol::kademlia::pb::Message_Peer >(Arena* arena) {
  return Arena::CreateInternal< ::libp2p::protocol::kademlia::pb::Message_Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::libp2p::protocol::kademlia::pb::Message* Arena::CreateMaybeMessage< ::libp2p::protocol::kademlia::pb::Message >(Arena* arena) {
  return Arena::CreateInternal< ::libp2p::protocol::kademlia::pb::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
