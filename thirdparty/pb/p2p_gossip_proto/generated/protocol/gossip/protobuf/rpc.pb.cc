// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/gossip/protobuf/rpc.proto

#include "protocol/gossip/protobuf/rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fgossip_2fprotobuf_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlGraft_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fgossip_2fprotobuf_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlIHave_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fgossip_2fprotobuf_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlIWant_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fgossip_2fprotobuf_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ControlMessage_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fgossip_2fprotobuf_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlPrune_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fgossip_2fprotobuf_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fgossip_2fprotobuf_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerInfo_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fgossip_2fprotobuf_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPC_SubOpts_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
namespace pubsub {
namespace pb {
class RPC_SubOptsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC_SubOpts> _instance;
} _RPC_SubOpts_default_instance_;
class RPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPC> _instance;
} _RPC_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class ControlMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlMessage> _instance;
} _ControlMessage_default_instance_;
class ControlIHaveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlIHave> _instance;
} _ControlIHave_default_instance_;
class ControlIWantDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlIWant> _instance;
} _ControlIWant_default_instance_;
class ControlGraftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlGraft> _instance;
} _ControlGraft_default_instance_;
class PeerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerInfo> _instance;
} _PeerInfo_default_instance_;
class ControlPruneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlPrune> _instance;
} _ControlPrune_default_instance_;
}  // namespace pb
}  // namespace pubsub
static void InitDefaultsscc_info_ControlGraft_protocol_2fgossip_2fprotobuf_2frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pubsub::pb::_ControlGraft_default_instance_;
    new (ptr) ::pubsub::pb::ControlGraft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub::pb::ControlGraft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlGraft_protocol_2fgossip_2fprotobuf_2frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControlGraft_protocol_2fgossip_2fprotobuf_2frpc_2eproto}, {}};

static void InitDefaultsscc_info_ControlIHave_protocol_2fgossip_2fprotobuf_2frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pubsub::pb::_ControlIHave_default_instance_;
    new (ptr) ::pubsub::pb::ControlIHave();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub::pb::ControlIHave::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlIHave_protocol_2fgossip_2fprotobuf_2frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControlIHave_protocol_2fgossip_2fprotobuf_2frpc_2eproto}, {}};

static void InitDefaultsscc_info_ControlIWant_protocol_2fgossip_2fprotobuf_2frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pubsub::pb::_ControlIWant_default_instance_;
    new (ptr) ::pubsub::pb::ControlIWant();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub::pb::ControlIWant::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlIWant_protocol_2fgossip_2fprotobuf_2frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControlIWant_protocol_2fgossip_2fprotobuf_2frpc_2eproto}, {}};

static void InitDefaultsscc_info_ControlMessage_protocol_2fgossip_2fprotobuf_2frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pubsub::pb::_ControlMessage_default_instance_;
    new (ptr) ::pubsub::pb::ControlMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub::pb::ControlMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ControlMessage_protocol_2fgossip_2fprotobuf_2frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ControlMessage_protocol_2fgossip_2fprotobuf_2frpc_2eproto}, {
      &scc_info_ControlIHave_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
      &scc_info_ControlIWant_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
      &scc_info_ControlGraft_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
      &scc_info_ControlPrune_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,}};

static void InitDefaultsscc_info_ControlPrune_protocol_2fgossip_2fprotobuf_2frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pubsub::pb::_ControlPrune_default_instance_;
    new (ptr) ::pubsub::pb::ControlPrune();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub::pb::ControlPrune::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlPrune_protocol_2fgossip_2fprotobuf_2frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ControlPrune_protocol_2fgossip_2fprotobuf_2frpc_2eproto}, {
      &scc_info_PeerInfo_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,}};

static void InitDefaultsscc_info_Message_protocol_2fgossip_2fprotobuf_2frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pubsub::pb::_Message_default_instance_;
    new (ptr) ::pubsub::pb::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub::pb::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_protocol_2fgossip_2fprotobuf_2frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_protocol_2fgossip_2fprotobuf_2frpc_2eproto}, {}};

static void InitDefaultsscc_info_PeerInfo_protocol_2fgossip_2fprotobuf_2frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pubsub::pb::_PeerInfo_default_instance_;
    new (ptr) ::pubsub::pb::PeerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub::pb::PeerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerInfo_protocol_2fgossip_2fprotobuf_2frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerInfo_protocol_2fgossip_2fprotobuf_2frpc_2eproto}, {}};

static void InitDefaultsscc_info_RPC_protocol_2fgossip_2fprotobuf_2frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pubsub::pb::_RPC_default_instance_;
    new (ptr) ::pubsub::pb::RPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub::pb::RPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RPC_protocol_2fgossip_2fprotobuf_2frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RPC_protocol_2fgossip_2fprotobuf_2frpc_2eproto}, {
      &scc_info_RPC_SubOpts_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
      &scc_info_Message_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
      &scc_info_ControlMessage_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,}};

static void InitDefaultsscc_info_RPC_SubOpts_protocol_2fgossip_2fprotobuf_2frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pubsub::pb::_RPC_SubOpts_default_instance_;
    new (ptr) ::pubsub::pb::RPC_SubOpts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub::pb::RPC_SubOpts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPC_SubOpts_protocol_2fgossip_2fprotobuf_2frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RPC_SubOpts_protocol_2fgossip_2fprotobuf_2frpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2fgossip_2fprotobuf_2frpc_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocol_2fgossip_2fprotobuf_2frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2fgossip_2fprotobuf_2frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::RPC_SubOpts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::RPC_SubOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::RPC_SubOpts, subscribe_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::RPC_SubOpts, topicid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::RPC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::RPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::RPC, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::RPC, publish_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::RPC, control_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::Message, from_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::Message, data_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::Message, seqno_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::Message, topic_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::Message, signature_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::Message, key_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlMessage, ihave_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlMessage, iwant_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlMessage, graft_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlMessage, prune_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlIHave, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlIHave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlIHave, topicid_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlIHave, messageids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlIWant, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlIWant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlIWant, messageids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlGraft, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlGraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlGraft, topicid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::PeerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::PeerInfo, peerid_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::PeerInfo, signedpeerrecord_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlPrune, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlPrune, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlPrune, topicid_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlPrune, peers_),
  PROTOBUF_FIELD_OFFSET(::pubsub::pb::ControlPrune, backoff_),
  0,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pubsub::pb::RPC_SubOpts)},
  { 9, 17, sizeof(::pubsub::pb::RPC)},
  { 20, 31, sizeof(::pubsub::pb::Message)},
  { 37, 46, sizeof(::pubsub::pb::ControlMessage)},
  { 50, 57, sizeof(::pubsub::pb::ControlIHave)},
  { 59, 65, sizeof(::pubsub::pb::ControlIWant)},
  { 66, 72, sizeof(::pubsub::pb::ControlGraft)},
  { 73, 80, sizeof(::pubsub::pb::PeerInfo)},
  { 82, 90, sizeof(::pubsub::pb::ControlPrune)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pubsub::pb::_RPC_SubOpts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pubsub::pb::_RPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pubsub::pb::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pubsub::pb::_ControlMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pubsub::pb::_ControlIHave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pubsub::pb::_ControlIWant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pubsub::pb::_ControlGraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pubsub::pb::_PeerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pubsub::pb::_ControlPrune_default_instance_),
};

const char descriptor_table_protodef_protocol_2fgossip_2fprotobuf_2frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"protocol/gossip/protobuf/rpc.proto\022\tpu"
  "bsub.pb\"\264\001\n\003RPC\022-\n\rsubscriptions\030\001 \003(\0132\026"
  ".pubsub.pb.RPC.SubOpts\022#\n\007publish\030\002 \003(\0132"
  "\022.pubsub.pb.Message\022*\n\007control\030\003 \001(\0132\031.p"
  "ubsub.pb.ControlMessage\032-\n\007SubOpts\022\021\n\tsu"
  "bscribe\030\001 \001(\010\022\017\n\007topicid\030\002 \001(\t\"c\n\007Messag"
  "e\022\014\n\004from\030\001 \001(\014\022\014\n\004data\030\002 \001(\014\022\r\n\005seqno\030\003"
  " \001(\014\022\r\n\005topic\030\004 \001(\t\022\021\n\tsignature\030\005 \001(\014\022\013"
  "\n\003key\030\006 \001(\014\"\260\001\n\016ControlMessage\022&\n\005ihave\030"
  "\001 \003(\0132\027.pubsub.pb.ControlIHave\022&\n\005iwant\030"
  "\002 \003(\0132\027.pubsub.pb.ControlIWant\022&\n\005graft\030"
  "\003 \003(\0132\027.pubsub.pb.ControlGraft\022&\n\005prune\030"
  "\004 \003(\0132\027.pubsub.pb.ControlPrune\"3\n\014Contro"
  "lIHave\022\017\n\007topicID\030\001 \001(\t\022\022\n\nmessageIDs\030\002 "
  "\003(\014\"\"\n\014ControlIWant\022\022\n\nmessageIDs\030\001 \003(\014\""
  "\037\n\014ControlGraft\022\017\n\007topicID\030\001 \001(\t\"4\n\010Peer"
  "Info\022\016\n\006peerID\030\001 \001(\014\022\030\n\020signedPeerRecord"
  "\030\002 \001(\014\"T\n\014ControlPrune\022\017\n\007topicID\030\001 \001(\t\022"
  "\"\n\005peers\030\002 \003(\0132\023.pubsub.pb.PeerInfo\022\017\n\007b"
  "ackoff\030\003 \001(\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto_sccs[9] = {
  &scc_info_ControlGraft_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
  &scc_info_ControlIHave_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
  &scc_info_ControlIWant_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
  &scc_info_ControlMessage_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
  &scc_info_ControlPrune_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
  &scc_info_Message_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
  &scc_info_PeerInfo_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
  &scc_info_RPC_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
  &scc_info_RPC_SubOpts_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto_once;
static bool descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto = {
  &descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto_initialized, descriptor_table_protodef_protocol_2fgossip_2fprotobuf_2frpc_2eproto, "protocol/gossip/protobuf/rpc.proto", 772,
  &descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto_once, descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto_sccs, descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto::offsets,
  file_level_metadata_protocol_2fgossip_2fprotobuf_2frpc_2eproto, 9, file_level_enum_descriptors_protocol_2fgossip_2fprotobuf_2frpc_2eproto, file_level_service_descriptors_protocol_2fgossip_2fprotobuf_2frpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2fgossip_2fprotobuf_2frpc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto), true);
namespace pubsub {
namespace pb {

// ===================================================================

void RPC_SubOpts::InitAsDefaultInstance() {
}
class RPC_SubOpts::_Internal {
 public:
  using HasBits = decltype(std::declval<RPC_SubOpts>()._has_bits_);
  static void set_has_subscribe(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_topicid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RPC_SubOpts::RPC_SubOpts()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.pb.RPC.SubOpts)
}
RPC_SubOpts::RPC_SubOpts(const RPC_SubOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topicid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_topicid()) {
    topicid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicid_);
  }
  subscribe_ = from.subscribe_;
  // @@protoc_insertion_point(copy_constructor:pubsub.pb.RPC.SubOpts)
}

void RPC_SubOpts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPC_SubOpts_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  topicid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscribe_ = false;
}

RPC_SubOpts::~RPC_SubOpts() {
  // @@protoc_insertion_point(destructor:pubsub.pb.RPC.SubOpts)
  SharedDtor();
}

void RPC_SubOpts::SharedDtor() {
  topicid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPC_SubOpts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC_SubOpts& RPC_SubOpts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_SubOpts_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  return *internal_default_instance();
}


void RPC_SubOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub.pb.RPC.SubOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topicid_.ClearNonDefaultToEmptyNoArena();
  }
  subscribe_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RPC_SubOpts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_subscribe(&has_bits);
          subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string topicid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topicid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pubsub.pb.RPC.SubOpts.topicid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC_SubOpts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.pb.RPC.SubOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool subscribe = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_subscribe(), target);
  }

  // optional string topicid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topicid().data(), static_cast<int>(this->_internal_topicid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pubsub.pb.RPC.SubOpts.topicid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topicid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.pb.RPC.SubOpts)
  return target;
}

size_t RPC_SubOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub.pb.RPC.SubOpts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string topicid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topicid());
    }

    // optional bool subscribe = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC_SubOpts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub.pb.RPC.SubOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC_SubOpts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC_SubOpts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub.pb.RPC.SubOpts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub.pb.RPC.SubOpts)
    MergeFrom(*source);
  }
}

void RPC_SubOpts::MergeFrom(const RPC_SubOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub.pb.RPC.SubOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      topicid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicid_);
    }
    if (cached_has_bits & 0x00000002u) {
      subscribe_ = from.subscribe_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RPC_SubOpts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub.pb.RPC.SubOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC_SubOpts::CopyFrom(const RPC_SubOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub.pb.RPC.SubOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC_SubOpts::IsInitialized() const {
  return true;
}

void RPC_SubOpts::InternalSwap(RPC_SubOpts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topicid_.Swap(&other->topicid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(subscribe_, other->subscribe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC_SubOpts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPC::InitAsDefaultInstance() {
  ::pubsub::pb::_RPC_default_instance_._instance.get_mutable()->control_ = const_cast< ::pubsub::pb::ControlMessage*>(
      ::pubsub::pb::ControlMessage::internal_default_instance());
}
class RPC::_Internal {
 public:
  using HasBits = decltype(std::declval<RPC>()._has_bits_);
  static const ::pubsub::pb::ControlMessage& control(const RPC* msg);
  static void set_has_control(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pubsub::pb::ControlMessage&
RPC::_Internal::control(const RPC* msg) {
  return *msg->control_;
}
RPC::RPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.pb.RPC)
}
RPC::RPC(const RPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      subscriptions_(from.subscriptions_),
      publish_(from.publish_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_control()) {
    control_ = new ::pubsub::pb::ControlMessage(*from.control_);
  } else {
    control_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pubsub.pb.RPC)
}

void RPC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPC_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  control_ = nullptr;
}

RPC::~RPC() {
  // @@protoc_insertion_point(destructor:pubsub.pb.RPC)
  SharedDtor();
}

void RPC::SharedDtor() {
  if (this != internal_default_instance()) delete control_;
}

void RPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPC& RPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPC_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  return *internal_default_instance();
}


void RPC::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub.pb.RPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  publish_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(control_ != nullptr);
    control_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pubsub.pb.RPC.SubOpts subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pubsub.pb.Message publish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publish(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .pubsub.pb.ControlMessage control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.pb.RPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pubsub.pb.RPC.SubOpts subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subscriptions(i), target, stream);
  }

  // repeated .pubsub.pb.Message publish = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publish_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_publish(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pubsub.pb.ControlMessage control = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::control(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.pb.RPC)
  return target;
}

size_t RPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub.pb.RPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pubsub.pb.RPC.SubOpts subscriptions = 1;
  total_size += 1UL * this->_internal_subscriptions_size();
  for (const auto& msg : this->subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pubsub.pb.Message publish = 2;
  total_size += 1UL * this->_internal_publish_size();
  for (const auto& msg : this->publish_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .pubsub.pb.ControlMessage control = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub.pb.RPC)
  GOOGLE_DCHECK_NE(&from, this);
  const RPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub.pb.RPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub.pb.RPC)
    MergeFrom(*source);
  }
}

void RPC::MergeFrom(const RPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub.pb.RPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  publish_.MergeFrom(from.publish_);
  if (from._internal_has_control()) {
    _internal_mutable_control()->::pubsub::pb::ControlMessage::MergeFrom(from._internal_control());
  }
}

void RPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub.pb.RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC::CopyFrom(const RPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub.pb.RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC::IsInitialized() const {
  return true;
}

void RPC::InternalSwap(RPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subscriptions_.InternalSwap(&other->subscriptions_);
  publish_.InternalSwap(&other->publish_);
  swap(control_, other->control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Message>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqno(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.pb.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  seqno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_seqno()) {
    seqno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.seqno_);
  }
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_topic()) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:pubsub.pb.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seqno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:pubsub.pb.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seqno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub.pb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      from_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      seqno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes seqno = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_seqno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string topic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pubsub.pb.Message.topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.pb.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // optional bytes seqno = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_seqno(), target);
  }

  // optional string topic = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pubsub.pb.Message.topic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_topic(), target);
  }

  // optional bytes signature = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_signature(), target);
  }

  // optional bytes key = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.pb.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub.pb.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes from = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_from());
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional bytes seqno = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_seqno());
    }

    // optional string topic = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic());
    }

    // optional bytes signature = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional bytes key = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub.pb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub.pb.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub.pb.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub.pb.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      seqno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.seqno_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub.pb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub.pb.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  seqno_.Swap(&other->seqno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlMessage::InitAsDefaultInstance() {
}
class ControlMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlMessage>()._has_bits_);
};

ControlMessage::ControlMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.pb.ControlMessage)
}
ControlMessage::ControlMessage(const ControlMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ihave_(from.ihave_),
      iwant_(from.iwant_),
      graft_(from.graft_),
      prune_(from.prune_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pubsub.pb.ControlMessage)
}

void ControlMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlMessage_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
}

ControlMessage::~ControlMessage() {
  // @@protoc_insertion_point(destructor:pubsub.pb.ControlMessage)
  SharedDtor();
}

void ControlMessage::SharedDtor() {
}

void ControlMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlMessage& ControlMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlMessage_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  return *internal_default_instance();
}


void ControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub.pb.ControlMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ihave_.Clear();
  iwant_.Clear();
  graft_.Clear();
  prune_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ControlMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pubsub.pb.ControlIHave ihave = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ihave(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pubsub.pb.ControlIWant iwant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_iwant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pubsub.pb.ControlGraft graft = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graft(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pubsub.pb.ControlPrune prune = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prune(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.pb.ControlMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pubsub.pb.ControlIHave ihave = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ihave_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ihave(i), target, stream);
  }

  // repeated .pubsub.pb.ControlIWant iwant = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_iwant_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_iwant(i), target, stream);
  }

  // repeated .pubsub.pb.ControlGraft graft = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graft_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_graft(i), target, stream);
  }

  // repeated .pubsub.pb.ControlPrune prune = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prune_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_prune(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.pb.ControlMessage)
  return target;
}

size_t ControlMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub.pb.ControlMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pubsub.pb.ControlIHave ihave = 1;
  total_size += 1UL * this->_internal_ihave_size();
  for (const auto& msg : this->ihave_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pubsub.pb.ControlIWant iwant = 2;
  total_size += 1UL * this->_internal_iwant_size();
  for (const auto& msg : this->iwant_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pubsub.pb.ControlGraft graft = 3;
  total_size += 1UL * this->_internal_graft_size();
  for (const auto& msg : this->graft_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pubsub.pb.ControlPrune prune = 4;
  total_size += 1UL * this->_internal_prune_size();
  for (const auto& msg : this->prune_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub.pb.ControlMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub.pb.ControlMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub.pb.ControlMessage)
    MergeFrom(*source);
  }
}

void ControlMessage::MergeFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub.pb.ControlMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ihave_.MergeFrom(from.ihave_);
  iwant_.MergeFrom(from.iwant_);
  graft_.MergeFrom(from.graft_);
  prune_.MergeFrom(from.prune_);
}

void ControlMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub.pb.ControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub.pb.ControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {
  return true;
}

void ControlMessage::InternalSwap(ControlMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ihave_.InternalSwap(&other->ihave_);
  iwant_.InternalSwap(&other->iwant_);
  graft_.InternalSwap(&other->graft_);
  prune_.InternalSwap(&other->prune_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlIHave::InitAsDefaultInstance() {
}
class ControlIHave::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlIHave>()._has_bits_);
  static void set_has_topicid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ControlIHave::ControlIHave()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.pb.ControlIHave)
}
ControlIHave::ControlIHave(const ControlIHave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      messageids_(from.messageids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topicid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_topicid()) {
    topicid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicid_);
  }
  // @@protoc_insertion_point(copy_constructor:pubsub.pb.ControlIHave)
}

void ControlIHave::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlIHave_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  topicid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ControlIHave::~ControlIHave() {
  // @@protoc_insertion_point(destructor:pubsub.pb.ControlIHave)
  SharedDtor();
}

void ControlIHave::SharedDtor() {
  topicid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlIHave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlIHave& ControlIHave::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlIHave_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  return *internal_default_instance();
}


void ControlIHave::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub.pb.ControlIHave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messageids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topicid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ControlIHave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string topicID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topicid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pubsub.pb.ControlIHave.topicID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes messageIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messageids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlIHave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.pb.ControlIHave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string topicID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topicid().data(), static_cast<int>(this->_internal_topicid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pubsub.pb.ControlIHave.topicID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topicid(), target);
  }

  // repeated bytes messageIDs = 2;
  for (int i = 0, n = this->_internal_messageids_size(); i < n; i++) {
    const auto& s = this->_internal_messageids(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.pb.ControlIHave)
  return target;
}

size_t ControlIHave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub.pb.ControlIHave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes messageIDs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(messageids_.size());
  for (int i = 0, n = messageids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      messageids_.Get(i));
  }

  // optional string topicID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topicid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlIHave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub.pb.ControlIHave)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlIHave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlIHave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub.pb.ControlIHave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub.pb.ControlIHave)
    MergeFrom(*source);
  }
}

void ControlIHave::MergeFrom(const ControlIHave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub.pb.ControlIHave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messageids_.MergeFrom(from.messageids_);
  if (from._internal_has_topicid()) {
    _has_bits_[0] |= 0x00000001u;
    topicid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicid_);
  }
}

void ControlIHave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub.pb.ControlIHave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlIHave::CopyFrom(const ControlIHave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub.pb.ControlIHave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlIHave::IsInitialized() const {
  return true;
}

void ControlIHave::InternalSwap(ControlIHave* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messageids_.InternalSwap(&other->messageids_);
  topicid_.Swap(&other->topicid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlIHave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlIWant::InitAsDefaultInstance() {
}
class ControlIWant::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlIWant>()._has_bits_);
};

ControlIWant::ControlIWant()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.pb.ControlIWant)
}
ControlIWant::ControlIWant(const ControlIWant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      messageids_(from.messageids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pubsub.pb.ControlIWant)
}

void ControlIWant::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlIWant_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
}

ControlIWant::~ControlIWant() {
  // @@protoc_insertion_point(destructor:pubsub.pb.ControlIWant)
  SharedDtor();
}

void ControlIWant::SharedDtor() {
}

void ControlIWant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlIWant& ControlIWant::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlIWant_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  return *internal_default_instance();
}


void ControlIWant::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub.pb.ControlIWant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messageids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ControlIWant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes messageIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messageids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlIWant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.pb.ControlIWant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes messageIDs = 1;
  for (int i = 0, n = this->_internal_messageids_size(); i < n; i++) {
    const auto& s = this->_internal_messageids(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.pb.ControlIWant)
  return target;
}

size_t ControlIWant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub.pb.ControlIWant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes messageIDs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(messageids_.size());
  for (int i = 0, n = messageids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      messageids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlIWant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub.pb.ControlIWant)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlIWant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlIWant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub.pb.ControlIWant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub.pb.ControlIWant)
    MergeFrom(*source);
  }
}

void ControlIWant::MergeFrom(const ControlIWant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub.pb.ControlIWant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messageids_.MergeFrom(from.messageids_);
}

void ControlIWant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub.pb.ControlIWant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlIWant::CopyFrom(const ControlIWant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub.pb.ControlIWant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlIWant::IsInitialized() const {
  return true;
}

void ControlIWant::InternalSwap(ControlIWant* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messageids_.InternalSwap(&other->messageids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlIWant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlGraft::InitAsDefaultInstance() {
}
class ControlGraft::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlGraft>()._has_bits_);
  static void set_has_topicid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ControlGraft::ControlGraft()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.pb.ControlGraft)
}
ControlGraft::ControlGraft(const ControlGraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topicid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_topicid()) {
    topicid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicid_);
  }
  // @@protoc_insertion_point(copy_constructor:pubsub.pb.ControlGraft)
}

void ControlGraft::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlGraft_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  topicid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ControlGraft::~ControlGraft() {
  // @@protoc_insertion_point(destructor:pubsub.pb.ControlGraft)
  SharedDtor();
}

void ControlGraft::SharedDtor() {
  topicid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlGraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlGraft& ControlGraft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlGraft_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  return *internal_default_instance();
}


void ControlGraft::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub.pb.ControlGraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topicid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ControlGraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string topicID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topicid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pubsub.pb.ControlGraft.topicID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlGraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.pb.ControlGraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string topicID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topicid().data(), static_cast<int>(this->_internal_topicid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pubsub.pb.ControlGraft.topicID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topicid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.pb.ControlGraft)
  return target;
}

size_t ControlGraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub.pb.ControlGraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string topicID = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topicid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlGraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub.pb.ControlGraft)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlGraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlGraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub.pb.ControlGraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub.pb.ControlGraft)
    MergeFrom(*source);
  }
}

void ControlGraft::MergeFrom(const ControlGraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub.pb.ControlGraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topicid()) {
    _has_bits_[0] |= 0x00000001u;
    topicid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicid_);
  }
}

void ControlGraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub.pb.ControlGraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlGraft::CopyFrom(const ControlGraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub.pb.ControlGraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGraft::IsInitialized() const {
  return true;
}

void ControlGraft::InternalSwap(ControlGraft* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topicid_.Swap(&other->topicid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGraft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerInfo::InitAsDefaultInstance() {
}
class PeerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PeerInfo>()._has_bits_);
  static void set_has_peerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signedpeerrecord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PeerInfo::PeerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.pb.PeerInfo)
}
PeerInfo::PeerInfo(const PeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_peerid()) {
    peerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peerid_);
  }
  signedpeerrecord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signedpeerrecord()) {
    signedpeerrecord_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signedpeerrecord_);
  }
  // @@protoc_insertion_point(copy_constructor:pubsub.pb.PeerInfo)
}

void PeerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerInfo_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  peerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signedpeerrecord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PeerInfo::~PeerInfo() {
  // @@protoc_insertion_point(destructor:pubsub.pb.PeerInfo)
  SharedDtor();
}

void PeerInfo::SharedDtor() {
  peerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signedpeerrecord_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerInfo& PeerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerInfo_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  return *internal_default_instance();
}


void PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub.pb.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      peerid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signedpeerrecord_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PeerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes peerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_peerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signedPeerRecord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signedpeerrecord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.pb.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes peerID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_peerid(), target);
  }

  // optional bytes signedPeerRecord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signedpeerrecord(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.pb.PeerInfo)
  return target;
}

size_t PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub.pb.PeerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes peerID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_peerid());
    }

    // optional bytes signedPeerRecord = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signedpeerrecord());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub.pb.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub.pb.PeerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub.pb.PeerInfo)
    MergeFrom(*source);
  }
}

void PeerInfo::MergeFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub.pb.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      peerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      signedpeerrecord_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signedpeerrecord_);
    }
  }
}

void PeerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub.pb.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfo::CopyFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub.pb.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfo::IsInitialized() const {
  return true;
}

void PeerInfo::InternalSwap(PeerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  peerid_.Swap(&other->peerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signedpeerrecord_.Swap(&other->signedpeerrecord_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlPrune::InitAsDefaultInstance() {
}
class ControlPrune::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlPrune>()._has_bits_);
  static void set_has_topicid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_backoff(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ControlPrune::ControlPrune()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.pb.ControlPrune)
}
ControlPrune::ControlPrune(const ControlPrune& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topicid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_topicid()) {
    topicid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicid_);
  }
  backoff_ = from.backoff_;
  // @@protoc_insertion_point(copy_constructor:pubsub.pb.ControlPrune)
}

void ControlPrune::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlPrune_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  topicid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backoff_ = PROTOBUF_ULONGLONG(0);
}

ControlPrune::~ControlPrune() {
  // @@protoc_insertion_point(destructor:pubsub.pb.ControlPrune)
  SharedDtor();
}

void ControlPrune::SharedDtor() {
  topicid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlPrune::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlPrune& ControlPrune::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlPrune_protocol_2fgossip_2fprotobuf_2frpc_2eproto.base);
  return *internal_default_instance();
}


void ControlPrune::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub.pb.ControlPrune)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topicid_.ClearNonDefaultToEmptyNoArena();
  }
  backoff_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ControlPrune::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string topicID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topicid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pubsub.pb.ControlPrune.topicID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pubsub.pb.PeerInfo peers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 backoff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_backoff(&has_bits);
          backoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlPrune::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.pb.ControlPrune)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string topicID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topicid().data(), static_cast<int>(this->_internal_topicid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pubsub.pb.ControlPrune.topicID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topicid(), target);
  }

  // repeated .pubsub.pb.PeerInfo peers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_peers(i), target, stream);
  }

  // optional uint64 backoff = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_backoff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.pb.ControlPrune)
  return target;
}

size_t ControlPrune::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub.pb.ControlPrune)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pubsub.pb.PeerInfo peers = 2;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string topicID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topicid());
    }

    // optional uint64 backoff = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_backoff());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlPrune::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub.pb.ControlPrune)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlPrune* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlPrune>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub.pb.ControlPrune)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub.pb.ControlPrune)
    MergeFrom(*source);
  }
}

void ControlPrune::MergeFrom(const ControlPrune& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub.pb.ControlPrune)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      topicid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topicid_);
    }
    if (cached_has_bits & 0x00000002u) {
      backoff_ = from.backoff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControlPrune::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub.pb.ControlPrune)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlPrune::CopyFrom(const ControlPrune& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub.pb.ControlPrune)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPrune::IsInitialized() const {
  return true;
}

void ControlPrune::InternalSwap(ControlPrune* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  peers_.InternalSwap(&other->peers_);
  topicid_.Swap(&other->topicid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(backoff_, other->backoff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlPrune::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace pubsub
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pubsub::pb::RPC_SubOpts* Arena::CreateMaybeMessage< ::pubsub::pb::RPC_SubOpts >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub::pb::RPC_SubOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::pubsub::pb::RPC* Arena::CreateMaybeMessage< ::pubsub::pb::RPC >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub::pb::RPC >(arena);
}
template<> PROTOBUF_NOINLINE ::pubsub::pb::Message* Arena::CreateMaybeMessage< ::pubsub::pb::Message >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub::pb::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::pubsub::pb::ControlMessage* Arena::CreateMaybeMessage< ::pubsub::pb::ControlMessage >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub::pb::ControlMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::pubsub::pb::ControlIHave* Arena::CreateMaybeMessage< ::pubsub::pb::ControlIHave >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub::pb::ControlIHave >(arena);
}
template<> PROTOBUF_NOINLINE ::pubsub::pb::ControlIWant* Arena::CreateMaybeMessage< ::pubsub::pb::ControlIWant >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub::pb::ControlIWant >(arena);
}
template<> PROTOBUF_NOINLINE ::pubsub::pb::ControlGraft* Arena::CreateMaybeMessage< ::pubsub::pb::ControlGraft >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub::pb::ControlGraft >(arena);
}
template<> PROTOBUF_NOINLINE ::pubsub::pb::PeerInfo* Arena::CreateMaybeMessage< ::pubsub::pb::PeerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub::pb::PeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pubsub::pb::ControlPrune* Arena::CreateMaybeMessage< ::pubsub::pb::ControlPrune >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub::pb::ControlPrune >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
