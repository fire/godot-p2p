// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/gossip/protobuf/rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fgossip_2fprotobuf_2frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fgossip_2fprotobuf_2frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fgossip_2fprotobuf_2frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
namespace pubsub {
namespace pb {
class ControlGraft;
class ControlGraftDefaultTypeInternal;
extern ControlGraftDefaultTypeInternal _ControlGraft_default_instance_;
class ControlIHave;
class ControlIHaveDefaultTypeInternal;
extern ControlIHaveDefaultTypeInternal _ControlIHave_default_instance_;
class ControlIWant;
class ControlIWantDefaultTypeInternal;
extern ControlIWantDefaultTypeInternal _ControlIWant_default_instance_;
class ControlMessage;
class ControlMessageDefaultTypeInternal;
extern ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
class ControlPrune;
class ControlPruneDefaultTypeInternal;
extern ControlPruneDefaultTypeInternal _ControlPrune_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PeerInfo;
class PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
class RPC;
class RPCDefaultTypeInternal;
extern RPCDefaultTypeInternal _RPC_default_instance_;
class RPC_SubOpts;
class RPC_SubOptsDefaultTypeInternal;
extern RPC_SubOptsDefaultTypeInternal _RPC_SubOpts_default_instance_;
}  // namespace pb
}  // namespace pubsub
PROTOBUF_NAMESPACE_OPEN
template<> ::pubsub::pb::ControlGraft* Arena::CreateMaybeMessage<::pubsub::pb::ControlGraft>(Arena*);
template<> ::pubsub::pb::ControlIHave* Arena::CreateMaybeMessage<::pubsub::pb::ControlIHave>(Arena*);
template<> ::pubsub::pb::ControlIWant* Arena::CreateMaybeMessage<::pubsub::pb::ControlIWant>(Arena*);
template<> ::pubsub::pb::ControlMessage* Arena::CreateMaybeMessage<::pubsub::pb::ControlMessage>(Arena*);
template<> ::pubsub::pb::ControlPrune* Arena::CreateMaybeMessage<::pubsub::pb::ControlPrune>(Arena*);
template<> ::pubsub::pb::Message* Arena::CreateMaybeMessage<::pubsub::pb::Message>(Arena*);
template<> ::pubsub::pb::PeerInfo* Arena::CreateMaybeMessage<::pubsub::pb::PeerInfo>(Arena*);
template<> ::pubsub::pb::RPC* Arena::CreateMaybeMessage<::pubsub::pb::RPC>(Arena*);
template<> ::pubsub::pb::RPC_SubOpts* Arena::CreateMaybeMessage<::pubsub::pb::RPC_SubOpts>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pubsub {
namespace pb {

// ===================================================================

class RPC_SubOpts :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.pb.RPC.SubOpts) */ {
 public:
  RPC_SubOpts();
  virtual ~RPC_SubOpts();

  RPC_SubOpts(const RPC_SubOpts& from);
  RPC_SubOpts(RPC_SubOpts&& from) noexcept
    : RPC_SubOpts() {
    *this = ::std::move(from);
  }

  inline RPC_SubOpts& operator=(const RPC_SubOpts& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC_SubOpts& operator=(RPC_SubOpts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPC_SubOpts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPC_SubOpts* internal_default_instance() {
    return reinterpret_cast<const RPC_SubOpts*>(
               &_RPC_SubOpts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RPC_SubOpts& a, RPC_SubOpts& b) {
    a.Swap(&b);
  }
  inline void Swap(RPC_SubOpts* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPC_SubOpts* New() const final {
    return CreateMaybeMessage<RPC_SubOpts>(nullptr);
  }

  RPC_SubOpts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPC_SubOpts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPC_SubOpts& from);
  void MergeFrom(const RPC_SubOpts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC_SubOpts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.pb.RPC.SubOpts";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto);
    return ::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicidFieldNumber = 2,
    kSubscribeFieldNumber = 1,
  };
  // optional string topicid = 2;
  bool has_topicid() const;
  private:
  bool _internal_has_topicid() const;
  public:
  void clear_topicid();
  const std::string& topicid() const;
  void set_topicid(const std::string& value);
  void set_topicid(std::string&& value);
  void set_topicid(const char* value);
  void set_topicid(const char* value, size_t size);
  std::string* mutable_topicid();
  std::string* release_topicid();
  void set_allocated_topicid(std::string* topicid);
  private:
  const std::string& _internal_topicid() const;
  void _internal_set_topicid(const std::string& value);
  std::string* _internal_mutable_topicid();
  public:

  // optional bool subscribe = 1;
  bool has_subscribe() const;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  bool subscribe() const;
  void set_subscribe(bool value);
  private:
  bool _internal_subscribe() const;
  void _internal_set_subscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pubsub.pb.RPC.SubOpts)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicid_;
  bool subscribe_;
  friend struct ::TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
};
// -------------------------------------------------------------------

class RPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.pb.RPC) */ {
 public:
  RPC();
  virtual ~RPC();

  RPC(const RPC& from);
  RPC(RPC&& from) noexcept
    : RPC() {
    *this = ::std::move(from);
  }

  inline RPC& operator=(const RPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPC& operator=(RPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPC* internal_default_instance() {
    return reinterpret_cast<const RPC*>(
               &_RPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RPC& a, RPC& b) {
    a.Swap(&b);
  }
  inline void Swap(RPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPC* New() const final {
    return CreateMaybeMessage<RPC>(nullptr);
  }

  RPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPC& from);
  void MergeFrom(const RPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.pb.RPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto);
    return ::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RPC_SubOpts SubOpts;

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionsFieldNumber = 1,
    kPublishFieldNumber = 2,
    kControlFieldNumber = 3,
  };
  // repeated .pubsub.pb.RPC.SubOpts subscriptions = 1;
  int subscriptions_size() const;
  private:
  int _internal_subscriptions_size() const;
  public:
  void clear_subscriptions();
  ::pubsub::pb::RPC_SubOpts* mutable_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::RPC_SubOpts >*
      mutable_subscriptions();
  private:
  const ::pubsub::pb::RPC_SubOpts& _internal_subscriptions(int index) const;
  ::pubsub::pb::RPC_SubOpts* _internal_add_subscriptions();
  public:
  const ::pubsub::pb::RPC_SubOpts& subscriptions(int index) const;
  ::pubsub::pb::RPC_SubOpts* add_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::RPC_SubOpts >&
      subscriptions() const;

  // repeated .pubsub.pb.Message publish = 2;
  int publish_size() const;
  private:
  int _internal_publish_size() const;
  public:
  void clear_publish();
  ::pubsub::pb::Message* mutable_publish(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::Message >*
      mutable_publish();
  private:
  const ::pubsub::pb::Message& _internal_publish(int index) const;
  ::pubsub::pb::Message* _internal_add_publish();
  public:
  const ::pubsub::pb::Message& publish(int index) const;
  ::pubsub::pb::Message* add_publish();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::Message >&
      publish() const;

  // optional .pubsub.pb.ControlMessage control = 3;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::pubsub::pb::ControlMessage& control() const;
  ::pubsub::pb::ControlMessage* release_control();
  ::pubsub::pb::ControlMessage* mutable_control();
  void set_allocated_control(::pubsub::pb::ControlMessage* control);
  private:
  const ::pubsub::pb::ControlMessage& _internal_control() const;
  ::pubsub::pb::ControlMessage* _internal_mutable_control();
  public:

  // @@protoc_insertion_point(class_scope:pubsub.pb.RPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::RPC_SubOpts > subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::Message > publish_;
  ::pubsub::pb::ControlMessage* control_;
  friend struct ::TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.pb.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.pb.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto);
    return ::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kDataFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTopicFieldNumber = 4,
    kSignatureFieldNumber = 5,
    kKeyFieldNumber = 6,
  };
  // optional bytes from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional bytes seqno = 3;
  bool has_seqno() const;
  private:
  bool _internal_has_seqno() const;
  public:
  void clear_seqno();
  const std::string& seqno() const;
  void set_seqno(const std::string& value);
  void set_seqno(std::string&& value);
  void set_seqno(const char* value);
  void set_seqno(const void* value, size_t size);
  std::string* mutable_seqno();
  std::string* release_seqno();
  void set_allocated_seqno(std::string* seqno);
  private:
  const std::string& _internal_seqno() const;
  void _internal_set_seqno(const std::string& value);
  std::string* _internal_mutable_seqno();
  public:

  // optional string topic = 4;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // optional bytes signature = 5;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional bytes key = 6;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:pubsub.pb.Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seqno_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
};
// -------------------------------------------------------------------

class ControlMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.pb.ControlMessage) */ {
 public:
  ControlMessage();
  virtual ~ControlMessage();

  ControlMessage(const ControlMessage& from);
  ControlMessage(ControlMessage&& from) noexcept
    : ControlMessage() {
    *this = ::std::move(from);
  }

  inline ControlMessage& operator=(const ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlMessage& operator=(ControlMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlMessage* internal_default_instance() {
    return reinterpret_cast<const ControlMessage*>(
               &_ControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ControlMessage& a, ControlMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlMessage* New() const final {
    return CreateMaybeMessage<ControlMessage>(nullptr);
  }

  ControlMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlMessage& from);
  void MergeFrom(const ControlMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.pb.ControlMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto);
    return ::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIhaveFieldNumber = 1,
    kIwantFieldNumber = 2,
    kGraftFieldNumber = 3,
    kPruneFieldNumber = 4,
  };
  // repeated .pubsub.pb.ControlIHave ihave = 1;
  int ihave_size() const;
  private:
  int _internal_ihave_size() const;
  public:
  void clear_ihave();
  ::pubsub::pb::ControlIHave* mutable_ihave(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIHave >*
      mutable_ihave();
  private:
  const ::pubsub::pb::ControlIHave& _internal_ihave(int index) const;
  ::pubsub::pb::ControlIHave* _internal_add_ihave();
  public:
  const ::pubsub::pb::ControlIHave& ihave(int index) const;
  ::pubsub::pb::ControlIHave* add_ihave();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIHave >&
      ihave() const;

  // repeated .pubsub.pb.ControlIWant iwant = 2;
  int iwant_size() const;
  private:
  int _internal_iwant_size() const;
  public:
  void clear_iwant();
  ::pubsub::pb::ControlIWant* mutable_iwant(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIWant >*
      mutable_iwant();
  private:
  const ::pubsub::pb::ControlIWant& _internal_iwant(int index) const;
  ::pubsub::pb::ControlIWant* _internal_add_iwant();
  public:
  const ::pubsub::pb::ControlIWant& iwant(int index) const;
  ::pubsub::pb::ControlIWant* add_iwant();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIWant >&
      iwant() const;

  // repeated .pubsub.pb.ControlGraft graft = 3;
  int graft_size() const;
  private:
  int _internal_graft_size() const;
  public:
  void clear_graft();
  ::pubsub::pb::ControlGraft* mutable_graft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlGraft >*
      mutable_graft();
  private:
  const ::pubsub::pb::ControlGraft& _internal_graft(int index) const;
  ::pubsub::pb::ControlGraft* _internal_add_graft();
  public:
  const ::pubsub::pb::ControlGraft& graft(int index) const;
  ::pubsub::pb::ControlGraft* add_graft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlGraft >&
      graft() const;

  // repeated .pubsub.pb.ControlPrune prune = 4;
  int prune_size() const;
  private:
  int _internal_prune_size() const;
  public:
  void clear_prune();
  ::pubsub::pb::ControlPrune* mutable_prune(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlPrune >*
      mutable_prune();
  private:
  const ::pubsub::pb::ControlPrune& _internal_prune(int index) const;
  ::pubsub::pb::ControlPrune* _internal_add_prune();
  public:
  const ::pubsub::pb::ControlPrune& prune(int index) const;
  ::pubsub::pb::ControlPrune* add_prune();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlPrune >&
      prune() const;

  // @@protoc_insertion_point(class_scope:pubsub.pb.ControlMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIHave > ihave_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIWant > iwant_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlGraft > graft_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlPrune > prune_;
  friend struct ::TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
};
// -------------------------------------------------------------------

class ControlIHave :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.pb.ControlIHave) */ {
 public:
  ControlIHave();
  virtual ~ControlIHave();

  ControlIHave(const ControlIHave& from);
  ControlIHave(ControlIHave&& from) noexcept
    : ControlIHave() {
    *this = ::std::move(from);
  }

  inline ControlIHave& operator=(const ControlIHave& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlIHave& operator=(ControlIHave&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlIHave& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlIHave* internal_default_instance() {
    return reinterpret_cast<const ControlIHave*>(
               &_ControlIHave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ControlIHave& a, ControlIHave& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlIHave* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlIHave* New() const final {
    return CreateMaybeMessage<ControlIHave>(nullptr);
  }

  ControlIHave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlIHave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlIHave& from);
  void MergeFrom(const ControlIHave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlIHave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.pb.ControlIHave";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto);
    return ::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIDsFieldNumber = 2,
    kTopicIDFieldNumber = 1,
  };
  // repeated bytes messageIDs = 2;
  int messageids_size() const;
  private:
  int _internal_messageids_size() const;
  public:
  void clear_messageids();
  const std::string& messageids(int index) const;
  std::string* mutable_messageids(int index);
  void set_messageids(int index, const std::string& value);
  void set_messageids(int index, std::string&& value);
  void set_messageids(int index, const char* value);
  void set_messageids(int index, const void* value, size_t size);
  std::string* add_messageids();
  void add_messageids(const std::string& value);
  void add_messageids(std::string&& value);
  void add_messageids(const char* value);
  void add_messageids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& messageids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_messageids();
  private:
  const std::string& _internal_messageids(int index) const;
  std::string* _internal_add_messageids();
  public:

  // optional string topicID = 1;
  bool has_topicid() const;
  private:
  bool _internal_has_topicid() const;
  public:
  void clear_topicid();
  const std::string& topicid() const;
  void set_topicid(const std::string& value);
  void set_topicid(std::string&& value);
  void set_topicid(const char* value);
  void set_topicid(const char* value, size_t size);
  std::string* mutable_topicid();
  std::string* release_topicid();
  void set_allocated_topicid(std::string* topicid);
  private:
  const std::string& _internal_topicid() const;
  void _internal_set_topicid(const std::string& value);
  std::string* _internal_mutable_topicid();
  public:

  // @@protoc_insertion_point(class_scope:pubsub.pb.ControlIHave)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> messageids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicid_;
  friend struct ::TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
};
// -------------------------------------------------------------------

class ControlIWant :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.pb.ControlIWant) */ {
 public:
  ControlIWant();
  virtual ~ControlIWant();

  ControlIWant(const ControlIWant& from);
  ControlIWant(ControlIWant&& from) noexcept
    : ControlIWant() {
    *this = ::std::move(from);
  }

  inline ControlIWant& operator=(const ControlIWant& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlIWant& operator=(ControlIWant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlIWant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlIWant* internal_default_instance() {
    return reinterpret_cast<const ControlIWant*>(
               &_ControlIWant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ControlIWant& a, ControlIWant& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlIWant* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlIWant* New() const final {
    return CreateMaybeMessage<ControlIWant>(nullptr);
  }

  ControlIWant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlIWant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlIWant& from);
  void MergeFrom(const ControlIWant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlIWant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.pb.ControlIWant";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto);
    return ::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIDsFieldNumber = 1,
  };
  // repeated bytes messageIDs = 1;
  int messageids_size() const;
  private:
  int _internal_messageids_size() const;
  public:
  void clear_messageids();
  const std::string& messageids(int index) const;
  std::string* mutable_messageids(int index);
  void set_messageids(int index, const std::string& value);
  void set_messageids(int index, std::string&& value);
  void set_messageids(int index, const char* value);
  void set_messageids(int index, const void* value, size_t size);
  std::string* add_messageids();
  void add_messageids(const std::string& value);
  void add_messageids(std::string&& value);
  void add_messageids(const char* value);
  void add_messageids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& messageids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_messageids();
  private:
  const std::string& _internal_messageids(int index) const;
  std::string* _internal_add_messageids();
  public:

  // @@protoc_insertion_point(class_scope:pubsub.pb.ControlIWant)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> messageids_;
  friend struct ::TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
};
// -------------------------------------------------------------------

class ControlGraft :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.pb.ControlGraft) */ {
 public:
  ControlGraft();
  virtual ~ControlGraft();

  ControlGraft(const ControlGraft& from);
  ControlGraft(ControlGraft&& from) noexcept
    : ControlGraft() {
    *this = ::std::move(from);
  }

  inline ControlGraft& operator=(const ControlGraft& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGraft& operator=(ControlGraft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlGraft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlGraft* internal_default_instance() {
    return reinterpret_cast<const ControlGraft*>(
               &_ControlGraft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ControlGraft& a, ControlGraft& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGraft* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlGraft* New() const final {
    return CreateMaybeMessage<ControlGraft>(nullptr);
  }

  ControlGraft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlGraft>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlGraft& from);
  void MergeFrom(const ControlGraft& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGraft* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.pb.ControlGraft";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto);
    return ::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicIDFieldNumber = 1,
  };
  // optional string topicID = 1;
  bool has_topicid() const;
  private:
  bool _internal_has_topicid() const;
  public:
  void clear_topicid();
  const std::string& topicid() const;
  void set_topicid(const std::string& value);
  void set_topicid(std::string&& value);
  void set_topicid(const char* value);
  void set_topicid(const char* value, size_t size);
  std::string* mutable_topicid();
  std::string* release_topicid();
  void set_allocated_topicid(std::string* topicid);
  private:
  const std::string& _internal_topicid() const;
  void _internal_set_topicid(const std::string& value);
  std::string* _internal_mutable_topicid();
  public:

  // @@protoc_insertion_point(class_scope:pubsub.pb.ControlGraft)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicid_;
  friend struct ::TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
};
// -------------------------------------------------------------------

class PeerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.pb.PeerInfo) */ {
 public:
  PeerInfo();
  virtual ~PeerInfo();

  PeerInfo(const PeerInfo& from);
  PeerInfo(PeerInfo&& from) noexcept
    : PeerInfo() {
    *this = ::std::move(from);
  }

  inline PeerInfo& operator=(const PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerInfo& operator=(PeerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerInfo* internal_default_instance() {
    return reinterpret_cast<const PeerInfo*>(
               &_PeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PeerInfo& a, PeerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerInfo* New() const final {
    return CreateMaybeMessage<PeerInfo>(nullptr);
  }

  PeerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerInfo& from);
  void MergeFrom(const PeerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.pb.PeerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto);
    return ::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerIDFieldNumber = 1,
    kSignedPeerRecordFieldNumber = 2,
  };
  // optional bytes peerID = 1;
  bool has_peerid() const;
  private:
  bool _internal_has_peerid() const;
  public:
  void clear_peerid();
  const std::string& peerid() const;
  void set_peerid(const std::string& value);
  void set_peerid(std::string&& value);
  void set_peerid(const char* value);
  void set_peerid(const void* value, size_t size);
  std::string* mutable_peerid();
  std::string* release_peerid();
  void set_allocated_peerid(std::string* peerid);
  private:
  const std::string& _internal_peerid() const;
  void _internal_set_peerid(const std::string& value);
  std::string* _internal_mutable_peerid();
  public:

  // optional bytes signedPeerRecord = 2;
  bool has_signedpeerrecord() const;
  private:
  bool _internal_has_signedpeerrecord() const;
  public:
  void clear_signedpeerrecord();
  const std::string& signedpeerrecord() const;
  void set_signedpeerrecord(const std::string& value);
  void set_signedpeerrecord(std::string&& value);
  void set_signedpeerrecord(const char* value);
  void set_signedpeerrecord(const void* value, size_t size);
  std::string* mutable_signedpeerrecord();
  std::string* release_signedpeerrecord();
  void set_allocated_signedpeerrecord(std::string* signedpeerrecord);
  private:
  const std::string& _internal_signedpeerrecord() const;
  void _internal_set_signedpeerrecord(const std::string& value);
  std::string* _internal_mutable_signedpeerrecord();
  public:

  // @@protoc_insertion_point(class_scope:pubsub.pb.PeerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signedpeerrecord_;
  friend struct ::TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
};
// -------------------------------------------------------------------

class ControlPrune :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pubsub.pb.ControlPrune) */ {
 public:
  ControlPrune();
  virtual ~ControlPrune();

  ControlPrune(const ControlPrune& from);
  ControlPrune(ControlPrune&& from) noexcept
    : ControlPrune() {
    *this = ::std::move(from);
  }

  inline ControlPrune& operator=(const ControlPrune& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlPrune& operator=(ControlPrune&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlPrune& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlPrune* internal_default_instance() {
    return reinterpret_cast<const ControlPrune*>(
               &_ControlPrune_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ControlPrune& a, ControlPrune& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlPrune* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlPrune* New() const final {
    return CreateMaybeMessage<ControlPrune>(nullptr);
  }

  ControlPrune* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlPrune>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlPrune& from);
  void MergeFrom(const ControlPrune& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlPrune* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pubsub.pb.ControlPrune";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto);
    return ::descriptor_table_protocol_2fgossip_2fprotobuf_2frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 2,
    kTopicIDFieldNumber = 1,
    kBackoffFieldNumber = 3,
  };
  // repeated .pubsub.pb.PeerInfo peers = 2;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::pubsub::pb::PeerInfo* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::PeerInfo >*
      mutable_peers();
  private:
  const ::pubsub::pb::PeerInfo& _internal_peers(int index) const;
  ::pubsub::pb::PeerInfo* _internal_add_peers();
  public:
  const ::pubsub::pb::PeerInfo& peers(int index) const;
  ::pubsub::pb::PeerInfo* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::PeerInfo >&
      peers() const;

  // optional string topicID = 1;
  bool has_topicid() const;
  private:
  bool _internal_has_topicid() const;
  public:
  void clear_topicid();
  const std::string& topicid() const;
  void set_topicid(const std::string& value);
  void set_topicid(std::string&& value);
  void set_topicid(const char* value);
  void set_topicid(const char* value, size_t size);
  std::string* mutable_topicid();
  std::string* release_topicid();
  void set_allocated_topicid(std::string* topicid);
  private:
  const std::string& _internal_topicid() const;
  void _internal_set_topicid(const std::string& value);
  std::string* _internal_mutable_topicid();
  public:

  // optional uint64 backoff = 3;
  bool has_backoff() const;
  private:
  bool _internal_has_backoff() const;
  public:
  void clear_backoff();
  ::PROTOBUF_NAMESPACE_ID::uint64 backoff() const;
  void set_backoff(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_backoff() const;
  void _internal_set_backoff(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pubsub.pb.ControlPrune)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::PeerInfo > peers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 backoff_;
  friend struct ::TableStruct_protocol_2fgossip_2fprotobuf_2frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPC_SubOpts

// optional bool subscribe = 1;
inline bool RPC_SubOpts::_internal_has_subscribe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPC_SubOpts::has_subscribe() const {
  return _internal_has_subscribe();
}
inline void RPC_SubOpts::clear_subscribe() {
  subscribe_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RPC_SubOpts::_internal_subscribe() const {
  return subscribe_;
}
inline bool RPC_SubOpts::subscribe() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.RPC.SubOpts.subscribe)
  return _internal_subscribe();
}
inline void RPC_SubOpts::_internal_set_subscribe(bool value) {
  _has_bits_[0] |= 0x00000002u;
  subscribe_ = value;
}
inline void RPC_SubOpts::set_subscribe(bool value) {
  _internal_set_subscribe(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.RPC.SubOpts.subscribe)
}

// optional string topicid = 2;
inline bool RPC_SubOpts::_internal_has_topicid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPC_SubOpts::has_topicid() const {
  return _internal_has_topicid();
}
inline void RPC_SubOpts::clear_topicid() {
  topicid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPC_SubOpts::topicid() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.RPC.SubOpts.topicid)
  return _internal_topicid();
}
inline void RPC_SubOpts::set_topicid(const std::string& value) {
  _internal_set_topicid(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.RPC.SubOpts.topicid)
}
inline std::string* RPC_SubOpts::mutable_topicid() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.RPC.SubOpts.topicid)
  return _internal_mutable_topicid();
}
inline const std::string& RPC_SubOpts::_internal_topicid() const {
  return topicid_.GetNoArena();
}
inline void RPC_SubOpts::_internal_set_topicid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPC_SubOpts::set_topicid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.RPC.SubOpts.topicid)
}
inline void RPC_SubOpts::set_topicid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.RPC.SubOpts.topicid)
}
inline void RPC_SubOpts::set_topicid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.RPC.SubOpts.topicid)
}
inline std::string* RPC_SubOpts::_internal_mutable_topicid() {
  _has_bits_[0] |= 0x00000001u;
  return topicid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPC_SubOpts::release_topicid() {
  // @@protoc_insertion_point(field_release:pubsub.pb.RPC.SubOpts.topicid)
  if (!_internal_has_topicid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return topicid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPC_SubOpts::set_allocated_topicid(std::string* topicid) {
  if (topicid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topicid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topicid);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.RPC.SubOpts.topicid)
}

// -------------------------------------------------------------------

// RPC

// repeated .pubsub.pb.RPC.SubOpts subscriptions = 1;
inline int RPC::_internal_subscriptions_size() const {
  return subscriptions_.size();
}
inline int RPC::subscriptions_size() const {
  return _internal_subscriptions_size();
}
inline void RPC::clear_subscriptions() {
  subscriptions_.Clear();
}
inline ::pubsub::pb::RPC_SubOpts* RPC::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.RPC.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::RPC_SubOpts >*
RPC::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.pb.RPC.subscriptions)
  return &subscriptions_;
}
inline const ::pubsub::pb::RPC_SubOpts& RPC::_internal_subscriptions(int index) const {
  return subscriptions_.Get(index);
}
inline const ::pubsub::pb::RPC_SubOpts& RPC::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.pb.RPC.subscriptions)
  return _internal_subscriptions(index);
}
inline ::pubsub::pb::RPC_SubOpts* RPC::_internal_add_subscriptions() {
  return subscriptions_.Add();
}
inline ::pubsub::pb::RPC_SubOpts* RPC::add_subscriptions() {
  // @@protoc_insertion_point(field_add:pubsub.pb.RPC.subscriptions)
  return _internal_add_subscriptions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::RPC_SubOpts >&
RPC::subscriptions() const {
  // @@protoc_insertion_point(field_list:pubsub.pb.RPC.subscriptions)
  return subscriptions_;
}

// repeated .pubsub.pb.Message publish = 2;
inline int RPC::_internal_publish_size() const {
  return publish_.size();
}
inline int RPC::publish_size() const {
  return _internal_publish_size();
}
inline void RPC::clear_publish() {
  publish_.Clear();
}
inline ::pubsub::pb::Message* RPC::mutable_publish(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.RPC.publish)
  return publish_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::Message >*
RPC::mutable_publish() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.pb.RPC.publish)
  return &publish_;
}
inline const ::pubsub::pb::Message& RPC::_internal_publish(int index) const {
  return publish_.Get(index);
}
inline const ::pubsub::pb::Message& RPC::publish(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.pb.RPC.publish)
  return _internal_publish(index);
}
inline ::pubsub::pb::Message* RPC::_internal_add_publish() {
  return publish_.Add();
}
inline ::pubsub::pb::Message* RPC::add_publish() {
  // @@protoc_insertion_point(field_add:pubsub.pb.RPC.publish)
  return _internal_add_publish();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::Message >&
RPC::publish() const {
  // @@protoc_insertion_point(field_list:pubsub.pb.RPC.publish)
  return publish_;
}

// optional .pubsub.pb.ControlMessage control = 3;
inline bool RPC::_internal_has_control() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || control_ != nullptr);
  return value;
}
inline bool RPC::has_control() const {
  return _internal_has_control();
}
inline void RPC::clear_control() {
  if (control_ != nullptr) control_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pubsub::pb::ControlMessage& RPC::_internal_control() const {
  const ::pubsub::pb::ControlMessage* p = control_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pubsub::pb::ControlMessage*>(
      &::pubsub::pb::_ControlMessage_default_instance_);
}
inline const ::pubsub::pb::ControlMessage& RPC::control() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.RPC.control)
  return _internal_control();
}
inline ::pubsub::pb::ControlMessage* RPC::release_control() {
  // @@protoc_insertion_point(field_release:pubsub.pb.RPC.control)
  _has_bits_[0] &= ~0x00000001u;
  ::pubsub::pb::ControlMessage* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::pubsub::pb::ControlMessage* RPC::_internal_mutable_control() {
  _has_bits_[0] |= 0x00000001u;
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::pubsub::pb::ControlMessage>(GetArenaNoVirtual());
    control_ = p;
  }
  return control_;
}
inline ::pubsub::pb::ControlMessage* RPC::mutable_control() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.RPC.control)
  return _internal_mutable_control();
}
inline void RPC::set_allocated_control(::pubsub::pb::ControlMessage* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.RPC.control)
}

// -------------------------------------------------------------------

// Message

// optional bytes from = 1;
inline bool Message::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message::has_from() const {
  return _internal_has_from();
}
inline void Message::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message::from() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.Message.from)
  return _internal_from();
}
inline void Message::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.Message.from)
}
inline std::string* Message::mutable_from() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.Message.from)
  return _internal_mutable_from();
}
inline const std::string& Message::_internal_from() const {
  return from_.GetNoArena();
}
inline void Message::_internal_set_from(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_from(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.Message.from)
}
inline void Message::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.Message.from)
}
inline void Message::set_from(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.Message.from)
}
inline std::string* Message::_internal_mutable_from() {
  _has_bits_[0] |= 0x00000001u;
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_from() {
  // @@protoc_insertion_point(field_release:pubsub.pb.Message.from)
  if (!_internal_has_from()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.Message.from)
}

// optional bytes data = 2;
inline bool Message::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message::has_data() const {
  return _internal_has_data();
}
inline void Message::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message::data() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.Message.data)
  return _internal_data();
}
inline void Message::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.Message.data)
}
inline std::string* Message::mutable_data() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.Message.data)
  return _internal_mutable_data();
}
inline const std::string& Message::_internal_data() const {
  return data_.GetNoArena();
}
inline void Message::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.Message.data)
}
inline void Message::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.Message.data)
}
inline void Message::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.Message.data)
}
inline std::string* Message::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_data() {
  // @@protoc_insertion_point(field_release:pubsub.pb.Message.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.Message.data)
}

// optional bytes seqno = 3;
inline bool Message::_internal_has_seqno() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message::has_seqno() const {
  return _internal_has_seqno();
}
inline void Message::clear_seqno() {
  seqno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message::seqno() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.Message.seqno)
  return _internal_seqno();
}
inline void Message::set_seqno(const std::string& value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.Message.seqno)
}
inline std::string* Message::mutable_seqno() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.Message.seqno)
  return _internal_mutable_seqno();
}
inline const std::string& Message::_internal_seqno() const {
  return seqno_.GetNoArena();
}
inline void Message::_internal_set_seqno(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  seqno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_seqno(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  seqno_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.Message.seqno)
}
inline void Message::set_seqno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  seqno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.Message.seqno)
}
inline void Message::set_seqno(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  seqno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.Message.seqno)
}
inline std::string* Message::_internal_mutable_seqno() {
  _has_bits_[0] |= 0x00000004u;
  return seqno_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_seqno() {
  // @@protoc_insertion_point(field_release:pubsub.pb.Message.seqno)
  if (!_internal_has_seqno()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return seqno_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_seqno(std::string* seqno) {
  if (seqno != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  seqno_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seqno);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.Message.seqno)
}

// optional string topic = 4;
inline bool Message::_internal_has_topic() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Message::has_topic() const {
  return _internal_has_topic();
}
inline void Message::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message::topic() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.Message.topic)
  return _internal_topic();
}
inline void Message::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.Message.topic)
}
inline std::string* Message::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.Message.topic)
  return _internal_mutable_topic();
}
inline const std::string& Message::_internal_topic() const {
  return topic_.GetNoArena();
}
inline void Message::_internal_set_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.Message.topic)
}
inline void Message::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.Message.topic)
}
inline void Message::set_topic(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.Message.topic)
}
inline std::string* Message::_internal_mutable_topic() {
  _has_bits_[0] |= 0x00000008u;
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_topic() {
  // @@protoc_insertion_point(field_release:pubsub.pb.Message.topic)
  if (!_internal_has_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return topic_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.Message.topic)
}

// optional bytes signature = 5;
inline bool Message::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Message::has_signature() const {
  return _internal_has_signature();
}
inline void Message::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message::signature() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.Message.signature)
  return _internal_signature();
}
inline void Message::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.Message.signature)
}
inline std::string* Message::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.Message.signature)
  return _internal_mutable_signature();
}
inline const std::string& Message::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void Message::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.Message.signature)
}
inline void Message::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.Message.signature)
}
inline void Message::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.Message.signature)
}
inline std::string* Message::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000010u;
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_signature() {
  // @@protoc_insertion_point(field_release:pubsub.pb.Message.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return signature_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.Message.signature)
}

// optional bytes key = 6;
inline bool Message::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Message::has_key() const {
  return _internal_has_key();
}
inline void Message::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message::key() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.Message.key)
  return _internal_key();
}
inline void Message::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.Message.key)
}
inline std::string* Message::mutable_key() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.Message.key)
  return _internal_mutable_key();
}
inline const std::string& Message::_internal_key() const {
  return key_.GetNoArena();
}
inline void Message::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.Message.key)
}
inline void Message::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.Message.key)
}
inline void Message::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.Message.key)
}
inline std::string* Message::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000020u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_key() {
  // @@protoc_insertion_point(field_release:pubsub.pb.Message.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.Message.key)
}

// -------------------------------------------------------------------

// ControlMessage

// repeated .pubsub.pb.ControlIHave ihave = 1;
inline int ControlMessage::_internal_ihave_size() const {
  return ihave_.size();
}
inline int ControlMessage::ihave_size() const {
  return _internal_ihave_size();
}
inline void ControlMessage::clear_ihave() {
  ihave_.Clear();
}
inline ::pubsub::pb::ControlIHave* ControlMessage::mutable_ihave(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlMessage.ihave)
  return ihave_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIHave >*
ControlMessage::mutable_ihave() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.pb.ControlMessage.ihave)
  return &ihave_;
}
inline const ::pubsub::pb::ControlIHave& ControlMessage::_internal_ihave(int index) const {
  return ihave_.Get(index);
}
inline const ::pubsub::pb::ControlIHave& ControlMessage::ihave(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlMessage.ihave)
  return _internal_ihave(index);
}
inline ::pubsub::pb::ControlIHave* ControlMessage::_internal_add_ihave() {
  return ihave_.Add();
}
inline ::pubsub::pb::ControlIHave* ControlMessage::add_ihave() {
  // @@protoc_insertion_point(field_add:pubsub.pb.ControlMessage.ihave)
  return _internal_add_ihave();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIHave >&
ControlMessage::ihave() const {
  // @@protoc_insertion_point(field_list:pubsub.pb.ControlMessage.ihave)
  return ihave_;
}

// repeated .pubsub.pb.ControlIWant iwant = 2;
inline int ControlMessage::_internal_iwant_size() const {
  return iwant_.size();
}
inline int ControlMessage::iwant_size() const {
  return _internal_iwant_size();
}
inline void ControlMessage::clear_iwant() {
  iwant_.Clear();
}
inline ::pubsub::pb::ControlIWant* ControlMessage::mutable_iwant(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlMessage.iwant)
  return iwant_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIWant >*
ControlMessage::mutable_iwant() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.pb.ControlMessage.iwant)
  return &iwant_;
}
inline const ::pubsub::pb::ControlIWant& ControlMessage::_internal_iwant(int index) const {
  return iwant_.Get(index);
}
inline const ::pubsub::pb::ControlIWant& ControlMessage::iwant(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlMessage.iwant)
  return _internal_iwant(index);
}
inline ::pubsub::pb::ControlIWant* ControlMessage::_internal_add_iwant() {
  return iwant_.Add();
}
inline ::pubsub::pb::ControlIWant* ControlMessage::add_iwant() {
  // @@protoc_insertion_point(field_add:pubsub.pb.ControlMessage.iwant)
  return _internal_add_iwant();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlIWant >&
ControlMessage::iwant() const {
  // @@protoc_insertion_point(field_list:pubsub.pb.ControlMessage.iwant)
  return iwant_;
}

// repeated .pubsub.pb.ControlGraft graft = 3;
inline int ControlMessage::_internal_graft_size() const {
  return graft_.size();
}
inline int ControlMessage::graft_size() const {
  return _internal_graft_size();
}
inline void ControlMessage::clear_graft() {
  graft_.Clear();
}
inline ::pubsub::pb::ControlGraft* ControlMessage::mutable_graft(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlMessage.graft)
  return graft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlGraft >*
ControlMessage::mutable_graft() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.pb.ControlMessage.graft)
  return &graft_;
}
inline const ::pubsub::pb::ControlGraft& ControlMessage::_internal_graft(int index) const {
  return graft_.Get(index);
}
inline const ::pubsub::pb::ControlGraft& ControlMessage::graft(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlMessage.graft)
  return _internal_graft(index);
}
inline ::pubsub::pb::ControlGraft* ControlMessage::_internal_add_graft() {
  return graft_.Add();
}
inline ::pubsub::pb::ControlGraft* ControlMessage::add_graft() {
  // @@protoc_insertion_point(field_add:pubsub.pb.ControlMessage.graft)
  return _internal_add_graft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlGraft >&
ControlMessage::graft() const {
  // @@protoc_insertion_point(field_list:pubsub.pb.ControlMessage.graft)
  return graft_;
}

// repeated .pubsub.pb.ControlPrune prune = 4;
inline int ControlMessage::_internal_prune_size() const {
  return prune_.size();
}
inline int ControlMessage::prune_size() const {
  return _internal_prune_size();
}
inline void ControlMessage::clear_prune() {
  prune_.Clear();
}
inline ::pubsub::pb::ControlPrune* ControlMessage::mutable_prune(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlMessage.prune)
  return prune_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlPrune >*
ControlMessage::mutable_prune() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.pb.ControlMessage.prune)
  return &prune_;
}
inline const ::pubsub::pb::ControlPrune& ControlMessage::_internal_prune(int index) const {
  return prune_.Get(index);
}
inline const ::pubsub::pb::ControlPrune& ControlMessage::prune(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlMessage.prune)
  return _internal_prune(index);
}
inline ::pubsub::pb::ControlPrune* ControlMessage::_internal_add_prune() {
  return prune_.Add();
}
inline ::pubsub::pb::ControlPrune* ControlMessage::add_prune() {
  // @@protoc_insertion_point(field_add:pubsub.pb.ControlMessage.prune)
  return _internal_add_prune();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::ControlPrune >&
ControlMessage::prune() const {
  // @@protoc_insertion_point(field_list:pubsub.pb.ControlMessage.prune)
  return prune_;
}

// -------------------------------------------------------------------

// ControlIHave

// optional string topicID = 1;
inline bool ControlIHave::_internal_has_topicid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControlIHave::has_topicid() const {
  return _internal_has_topicid();
}
inline void ControlIHave::clear_topicid() {
  topicid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ControlIHave::topicid() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlIHave.topicID)
  return _internal_topicid();
}
inline void ControlIHave::set_topicid(const std::string& value) {
  _internal_set_topicid(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.ControlIHave.topicID)
}
inline std::string* ControlIHave::mutable_topicid() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlIHave.topicID)
  return _internal_mutable_topicid();
}
inline const std::string& ControlIHave::_internal_topicid() const {
  return topicid_.GetNoArena();
}
inline void ControlIHave::_internal_set_topicid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ControlIHave::set_topicid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.ControlIHave.topicID)
}
inline void ControlIHave::set_topicid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.ControlIHave.topicID)
}
inline void ControlIHave::set_topicid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.ControlIHave.topicID)
}
inline std::string* ControlIHave::_internal_mutable_topicid() {
  _has_bits_[0] |= 0x00000001u;
  return topicid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ControlIHave::release_topicid() {
  // @@protoc_insertion_point(field_release:pubsub.pb.ControlIHave.topicID)
  if (!_internal_has_topicid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return topicid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ControlIHave::set_allocated_topicid(std::string* topicid) {
  if (topicid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topicid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topicid);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.ControlIHave.topicID)
}

// repeated bytes messageIDs = 2;
inline int ControlIHave::_internal_messageids_size() const {
  return messageids_.size();
}
inline int ControlIHave::messageids_size() const {
  return _internal_messageids_size();
}
inline void ControlIHave::clear_messageids() {
  messageids_.Clear();
}
inline std::string* ControlIHave::add_messageids() {
  // @@protoc_insertion_point(field_add_mutable:pubsub.pb.ControlIHave.messageIDs)
  return _internal_add_messageids();
}
inline const std::string& ControlIHave::_internal_messageids(int index) const {
  return messageids_.Get(index);
}
inline const std::string& ControlIHave::messageids(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlIHave.messageIDs)
  return _internal_messageids(index);
}
inline std::string* ControlIHave::mutable_messageids(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlIHave.messageIDs)
  return messageids_.Mutable(index);
}
inline void ControlIHave::set_messageids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pubsub.pb.ControlIHave.messageIDs)
  messageids_.Mutable(index)->assign(value);
}
inline void ControlIHave::set_messageids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pubsub.pb.ControlIHave.messageIDs)
  messageids_.Mutable(index)->assign(std::move(value));
}
inline void ControlIHave::set_messageids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messageids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.pb.ControlIHave.messageIDs)
}
inline void ControlIHave::set_messageids(int index, const void* value, size_t size) {
  messageids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.ControlIHave.messageIDs)
}
inline std::string* ControlIHave::_internal_add_messageids() {
  return messageids_.Add();
}
inline void ControlIHave::add_messageids(const std::string& value) {
  messageids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pubsub.pb.ControlIHave.messageIDs)
}
inline void ControlIHave::add_messageids(std::string&& value) {
  messageids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pubsub.pb.ControlIHave.messageIDs)
}
inline void ControlIHave::add_messageids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messageids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pubsub.pb.ControlIHave.messageIDs)
}
inline void ControlIHave::add_messageids(const void* value, size_t size) {
  messageids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pubsub.pb.ControlIHave.messageIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ControlIHave::messageids() const {
  // @@protoc_insertion_point(field_list:pubsub.pb.ControlIHave.messageIDs)
  return messageids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ControlIHave::mutable_messageids() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.pb.ControlIHave.messageIDs)
  return &messageids_;
}

// -------------------------------------------------------------------

// ControlIWant

// repeated bytes messageIDs = 1;
inline int ControlIWant::_internal_messageids_size() const {
  return messageids_.size();
}
inline int ControlIWant::messageids_size() const {
  return _internal_messageids_size();
}
inline void ControlIWant::clear_messageids() {
  messageids_.Clear();
}
inline std::string* ControlIWant::add_messageids() {
  // @@protoc_insertion_point(field_add_mutable:pubsub.pb.ControlIWant.messageIDs)
  return _internal_add_messageids();
}
inline const std::string& ControlIWant::_internal_messageids(int index) const {
  return messageids_.Get(index);
}
inline const std::string& ControlIWant::messageids(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlIWant.messageIDs)
  return _internal_messageids(index);
}
inline std::string* ControlIWant::mutable_messageids(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlIWant.messageIDs)
  return messageids_.Mutable(index);
}
inline void ControlIWant::set_messageids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pubsub.pb.ControlIWant.messageIDs)
  messageids_.Mutable(index)->assign(value);
}
inline void ControlIWant::set_messageids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pubsub.pb.ControlIWant.messageIDs)
  messageids_.Mutable(index)->assign(std::move(value));
}
inline void ControlIWant::set_messageids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messageids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.pb.ControlIWant.messageIDs)
}
inline void ControlIWant::set_messageids(int index, const void* value, size_t size) {
  messageids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.ControlIWant.messageIDs)
}
inline std::string* ControlIWant::_internal_add_messageids() {
  return messageids_.Add();
}
inline void ControlIWant::add_messageids(const std::string& value) {
  messageids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pubsub.pb.ControlIWant.messageIDs)
}
inline void ControlIWant::add_messageids(std::string&& value) {
  messageids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pubsub.pb.ControlIWant.messageIDs)
}
inline void ControlIWant::add_messageids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messageids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pubsub.pb.ControlIWant.messageIDs)
}
inline void ControlIWant::add_messageids(const void* value, size_t size) {
  messageids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pubsub.pb.ControlIWant.messageIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ControlIWant::messageids() const {
  // @@protoc_insertion_point(field_list:pubsub.pb.ControlIWant.messageIDs)
  return messageids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ControlIWant::mutable_messageids() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.pb.ControlIWant.messageIDs)
  return &messageids_;
}

// -------------------------------------------------------------------

// ControlGraft

// optional string topicID = 1;
inline bool ControlGraft::_internal_has_topicid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControlGraft::has_topicid() const {
  return _internal_has_topicid();
}
inline void ControlGraft::clear_topicid() {
  topicid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ControlGraft::topicid() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlGraft.topicID)
  return _internal_topicid();
}
inline void ControlGraft::set_topicid(const std::string& value) {
  _internal_set_topicid(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.ControlGraft.topicID)
}
inline std::string* ControlGraft::mutable_topicid() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlGraft.topicID)
  return _internal_mutable_topicid();
}
inline const std::string& ControlGraft::_internal_topicid() const {
  return topicid_.GetNoArena();
}
inline void ControlGraft::_internal_set_topicid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ControlGraft::set_topicid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.ControlGraft.topicID)
}
inline void ControlGraft::set_topicid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.ControlGraft.topicID)
}
inline void ControlGraft::set_topicid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.ControlGraft.topicID)
}
inline std::string* ControlGraft::_internal_mutable_topicid() {
  _has_bits_[0] |= 0x00000001u;
  return topicid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ControlGraft::release_topicid() {
  // @@protoc_insertion_point(field_release:pubsub.pb.ControlGraft.topicID)
  if (!_internal_has_topicid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return topicid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ControlGraft::set_allocated_topicid(std::string* topicid) {
  if (topicid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topicid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topicid);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.ControlGraft.topicID)
}

// -------------------------------------------------------------------

// PeerInfo

// optional bytes peerID = 1;
inline bool PeerInfo::_internal_has_peerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PeerInfo::has_peerid() const {
  return _internal_has_peerid();
}
inline void PeerInfo::clear_peerid() {
  peerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PeerInfo::peerid() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.PeerInfo.peerID)
  return _internal_peerid();
}
inline void PeerInfo::set_peerid(const std::string& value) {
  _internal_set_peerid(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.PeerInfo.peerID)
}
inline std::string* PeerInfo::mutable_peerid() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.PeerInfo.peerID)
  return _internal_mutable_peerid();
}
inline const std::string& PeerInfo::_internal_peerid() const {
  return peerid_.GetNoArena();
}
inline void PeerInfo::_internal_set_peerid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerInfo::set_peerid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.PeerInfo.peerID)
}
inline void PeerInfo::set_peerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.PeerInfo.peerID)
}
inline void PeerInfo::set_peerid(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  peerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.PeerInfo.peerID)
}
inline std::string* PeerInfo::_internal_mutable_peerid() {
  _has_bits_[0] |= 0x00000001u;
  return peerid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerInfo::release_peerid() {
  // @@protoc_insertion_point(field_release:pubsub.pb.PeerInfo.peerID)
  if (!_internal_has_peerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return peerid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfo::set_allocated_peerid(std::string* peerid) {
  if (peerid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  peerid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peerid);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.PeerInfo.peerID)
}

// optional bytes signedPeerRecord = 2;
inline bool PeerInfo::_internal_has_signedpeerrecord() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PeerInfo::has_signedpeerrecord() const {
  return _internal_has_signedpeerrecord();
}
inline void PeerInfo::clear_signedpeerrecord() {
  signedpeerrecord_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PeerInfo::signedpeerrecord() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.PeerInfo.signedPeerRecord)
  return _internal_signedpeerrecord();
}
inline void PeerInfo::set_signedpeerrecord(const std::string& value) {
  _internal_set_signedpeerrecord(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.PeerInfo.signedPeerRecord)
}
inline std::string* PeerInfo::mutable_signedpeerrecord() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.PeerInfo.signedPeerRecord)
  return _internal_mutable_signedpeerrecord();
}
inline const std::string& PeerInfo::_internal_signedpeerrecord() const {
  return signedpeerrecord_.GetNoArena();
}
inline void PeerInfo::_internal_set_signedpeerrecord(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signedpeerrecord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerInfo::set_signedpeerrecord(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  signedpeerrecord_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.PeerInfo.signedPeerRecord)
}
inline void PeerInfo::set_signedpeerrecord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  signedpeerrecord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.PeerInfo.signedPeerRecord)
}
inline void PeerInfo::set_signedpeerrecord(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  signedpeerrecord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.PeerInfo.signedPeerRecord)
}
inline std::string* PeerInfo::_internal_mutable_signedpeerrecord() {
  _has_bits_[0] |= 0x00000002u;
  return signedpeerrecord_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerInfo::release_signedpeerrecord() {
  // @@protoc_insertion_point(field_release:pubsub.pb.PeerInfo.signedPeerRecord)
  if (!_internal_has_signedpeerrecord()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signedpeerrecord_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfo::set_allocated_signedpeerrecord(std::string* signedpeerrecord) {
  if (signedpeerrecord != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signedpeerrecord_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signedpeerrecord);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.PeerInfo.signedPeerRecord)
}

// -------------------------------------------------------------------

// ControlPrune

// optional string topicID = 1;
inline bool ControlPrune::_internal_has_topicid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControlPrune::has_topicid() const {
  return _internal_has_topicid();
}
inline void ControlPrune::clear_topicid() {
  topicid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ControlPrune::topicid() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlPrune.topicID)
  return _internal_topicid();
}
inline void ControlPrune::set_topicid(const std::string& value) {
  _internal_set_topicid(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.ControlPrune.topicID)
}
inline std::string* ControlPrune::mutable_topicid() {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlPrune.topicID)
  return _internal_mutable_topicid();
}
inline const std::string& ControlPrune::_internal_topicid() const {
  return topicid_.GetNoArena();
}
inline void ControlPrune::_internal_set_topicid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ControlPrune::set_topicid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pubsub.pb.ControlPrune.topicID)
}
inline void ControlPrune::set_topicid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pubsub.pb.ControlPrune.topicID)
}
inline void ControlPrune::set_topicid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  topicid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pubsub.pb.ControlPrune.topicID)
}
inline std::string* ControlPrune::_internal_mutable_topicid() {
  _has_bits_[0] |= 0x00000001u;
  return topicid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ControlPrune::release_topicid() {
  // @@protoc_insertion_point(field_release:pubsub.pb.ControlPrune.topicID)
  if (!_internal_has_topicid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return topicid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ControlPrune::set_allocated_topicid(std::string* topicid) {
  if (topicid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topicid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topicid);
  // @@protoc_insertion_point(field_set_allocated:pubsub.pb.ControlPrune.topicID)
}

// repeated .pubsub.pb.PeerInfo peers = 2;
inline int ControlPrune::_internal_peers_size() const {
  return peers_.size();
}
inline int ControlPrune::peers_size() const {
  return _internal_peers_size();
}
inline void ControlPrune::clear_peers() {
  peers_.Clear();
}
inline ::pubsub::pb::PeerInfo* ControlPrune::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.pb.ControlPrune.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::PeerInfo >*
ControlPrune::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.pb.ControlPrune.peers)
  return &peers_;
}
inline const ::pubsub::pb::PeerInfo& ControlPrune::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::pubsub::pb::PeerInfo& ControlPrune::peers(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlPrune.peers)
  return _internal_peers(index);
}
inline ::pubsub::pb::PeerInfo* ControlPrune::_internal_add_peers() {
  return peers_.Add();
}
inline ::pubsub::pb::PeerInfo* ControlPrune::add_peers() {
  // @@protoc_insertion_point(field_add:pubsub.pb.ControlPrune.peers)
  return _internal_add_peers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pubsub::pb::PeerInfo >&
ControlPrune::peers() const {
  // @@protoc_insertion_point(field_list:pubsub.pb.ControlPrune.peers)
  return peers_;
}

// optional uint64 backoff = 3;
inline bool ControlPrune::_internal_has_backoff() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlPrune::has_backoff() const {
  return _internal_has_backoff();
}
inline void ControlPrune::clear_backoff() {
  backoff_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ControlPrune::_internal_backoff() const {
  return backoff_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ControlPrune::backoff() const {
  // @@protoc_insertion_point(field_get:pubsub.pb.ControlPrune.backoff)
  return _internal_backoff();
}
inline void ControlPrune::_internal_set_backoff(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  backoff_ = value;
}
inline void ControlPrune::set_backoff(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_backoff(value);
  // @@protoc_insertion_point(field_set:pubsub.pb.ControlPrune.backoff)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace pubsub

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fgossip_2fprotobuf_2frpc_2eproto
