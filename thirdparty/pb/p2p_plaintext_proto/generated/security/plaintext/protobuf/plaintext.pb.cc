// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: security/plaintext/protobuf/plaintext.proto

#include "security/plaintext/protobuf/plaintext.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_crypto_2fprotobuf_2fkeys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKey_crypto_2fprotobuf_2fkeys_2eproto;
namespace libp2p {
namespace security {
namespace plaintext {
namespace protobuf {
class ExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Exchange> _instance;
} _Exchange_default_instance_;
}  // namespace protobuf
}  // namespace plaintext
}  // namespace security
}  // namespace libp2p
static void InitDefaultsscc_info_Exchange_security_2fplaintext_2fprotobuf_2fplaintext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libp2p::security::plaintext::protobuf::_Exchange_default_instance_;
    new (ptr) ::libp2p::security::plaintext::protobuf::Exchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libp2p::security::plaintext::protobuf::Exchange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Exchange_security_2fplaintext_2fprotobuf_2fplaintext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Exchange_security_2fplaintext_2fprotobuf_2fplaintext_2eproto}, {
      &scc_info_PublicKey_crypto_2fprotobuf_2fkeys_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_security_2fplaintext_2fprotobuf_2fplaintext_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_security_2fplaintext_2fprotobuf_2fplaintext_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_security_2fplaintext_2fprotobuf_2fplaintext_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_security_2fplaintext_2fprotobuf_2fplaintext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::libp2p::security::plaintext::protobuf::Exchange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libp2p::security::plaintext::protobuf::Exchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libp2p::security::plaintext::protobuf::Exchange, id_),
  PROTOBUF_FIELD_OFFSET(::libp2p::security::plaintext::protobuf::Exchange, pubkey_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::libp2p::security::plaintext::protobuf::Exchange)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libp2p::security::plaintext::protobuf::_Exchange_default_instance_),
};

const char descriptor_table_protodef_security_2fplaintext_2fprotobuf_2fplaintext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+security/plaintext/protobuf/plaintext."
  "proto\022\"libp2p.security.plaintext.protobu"
  "f\032\032crypto/protobuf/keys.proto\"I\n\010Exchang"
  "e\022\n\n\002id\030\001 \001(\014\0221\n\006pubkey\030\002 \001(\0132!.libp2p.c"
  "rypto.protobuf.PublicKey"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto_deps[1] = {
  &::descriptor_table_crypto_2fprotobuf_2fkeys_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto_sccs[1] = {
  &scc_info_Exchange_security_2fplaintext_2fprotobuf_2fplaintext_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto_once;
static bool descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto = {
  &descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto_initialized, descriptor_table_protodef_security_2fplaintext_2fprotobuf_2fplaintext_2eproto, "security/plaintext/protobuf/plaintext.proto", 184,
  &descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto_once, descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto_sccs, descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_security_2fplaintext_2fprotobuf_2fplaintext_2eproto::offsets,
  file_level_metadata_security_2fplaintext_2fprotobuf_2fplaintext_2eproto, 1, file_level_enum_descriptors_security_2fplaintext_2fprotobuf_2fplaintext_2eproto, file_level_service_descriptors_security_2fplaintext_2fprotobuf_2fplaintext_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_security_2fplaintext_2fprotobuf_2fplaintext_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_security_2fplaintext_2fprotobuf_2fplaintext_2eproto), true);
namespace libp2p {
namespace security {
namespace plaintext {
namespace protobuf {

// ===================================================================

void Exchange::InitAsDefaultInstance() {
  ::libp2p::security::plaintext::protobuf::_Exchange_default_instance_._instance.get_mutable()->pubkey_ = const_cast< ::libp2p::crypto::protobuf::PublicKey*>(
      ::libp2p::crypto::protobuf::PublicKey::internal_default_instance());
}
class Exchange::_Internal {
 public:
  using HasBits = decltype(std::declval<Exchange>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::libp2p::crypto::protobuf::PublicKey& pubkey(const Exchange* msg);
  static void set_has_pubkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::libp2p::crypto::protobuf::PublicKey&
Exchange::_Internal::pubkey(const Exchange* msg) {
  return *msg->pubkey_;
}
void Exchange::clear_pubkey() {
  if (pubkey_ != nullptr) pubkey_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Exchange::Exchange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libp2p.security.plaintext.protobuf.Exchange)
}
Exchange::Exchange(const Exchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_pubkey()) {
    pubkey_ = new ::libp2p::crypto::protobuf::PublicKey(*from.pubkey_);
  } else {
    pubkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:libp2p.security.plaintext.protobuf.Exchange)
}

void Exchange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Exchange_security_2fplaintext_2fprotobuf_2fplaintext_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_ = nullptr;
}

Exchange::~Exchange() {
  // @@protoc_insertion_point(destructor:libp2p.security.plaintext.protobuf.Exchange)
  SharedDtor();
}

void Exchange::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pubkey_;
}

void Exchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Exchange& Exchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Exchange_security_2fplaintext_2fprotobuf_2fplaintext_2eproto.base);
  return *internal_default_instance();
}


void Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:libp2p.security.plaintext.protobuf.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pubkey_ != nullptr);
      pubkey_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Exchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libp2p.crypto.protobuf.PublicKey pubkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pubkey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Exchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:libp2p.security.plaintext.protobuf.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .libp2p.crypto.protobuf.PublicKey pubkey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pubkey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libp2p.security.plaintext.protobuf.Exchange)
  return target;
}

size_t Exchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libp2p.security.plaintext.protobuf.Exchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional .libp2p.crypto.protobuf.PublicKey pubkey = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pubkey_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Exchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libp2p.security.plaintext.protobuf.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  const Exchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Exchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libp2p.security.plaintext.protobuf.Exchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libp2p.security.plaintext.protobuf.Exchange)
    MergeFrom(*source);
  }
}

void Exchange::MergeFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libp2p.security.plaintext.protobuf.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pubkey()->::libp2p::crypto::protobuf::PublicKey::MergeFrom(from._internal_pubkey());
    }
  }
}

void Exchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libp2p.security.plaintext.protobuf.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exchange::CopyFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libp2p.security.plaintext.protobuf.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exchange::IsInitialized() const {
  if (_internal_has_pubkey()) {
    if (!pubkey_->IsInitialized()) return false;
  }
  return true;
}

void Exchange::InternalSwap(Exchange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pubkey_, other->pubkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Exchange::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace plaintext
}  // namespace security
}  // namespace libp2p
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::libp2p::security::plaintext::protobuf::Exchange* Arena::CreateMaybeMessage< ::libp2p::security::plaintext::protobuf::Exchange >(Arena* arena) {
  return Arena::CreateInternal< ::libp2p::security::plaintext::protobuf::Exchange >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
