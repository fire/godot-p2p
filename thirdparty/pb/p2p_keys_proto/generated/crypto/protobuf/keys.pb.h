// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/protobuf/keys.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_2fprotobuf_2fkeys_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_2fprotobuf_2fkeys_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_2fprotobuf_2fkeys_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_2fprotobuf_2fkeys_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_2fprotobuf_2fkeys_2eproto;
namespace libp2p {
namespace crypto {
namespace protobuf {
class PrivateKey;
class PrivateKeyDefaultTypeInternal;
extern PrivateKeyDefaultTypeInternal _PrivateKey_default_instance_;
class PublicKey;
class PublicKeyDefaultTypeInternal;
extern PublicKeyDefaultTypeInternal _PublicKey_default_instance_;
}  // namespace protobuf
}  // namespace crypto
}  // namespace libp2p
PROTOBUF_NAMESPACE_OPEN
template<> ::libp2p::crypto::protobuf::PrivateKey* Arena::CreateMaybeMessage<::libp2p::crypto::protobuf::PrivateKey>(Arena*);
template<> ::libp2p::crypto::protobuf::PublicKey* Arena::CreateMaybeMessage<::libp2p::crypto::protobuf::PublicKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace libp2p {
namespace crypto {
namespace protobuf {

enum KeyType : int {
  RSA = 0,
  Ed25519 = 1,
  Secp256k1 = 2,
  ECDSA = 3
};
bool KeyType_IsValid(int value);
constexpr KeyType KeyType_MIN = RSA;
constexpr KeyType KeyType_MAX = ECDSA;
constexpr int KeyType_ARRAYSIZE = KeyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyType_descriptor();
template<typename T>
inline const std::string& KeyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyType_descriptor(), enum_t_value);
}
inline bool KeyType_Parse(
    const std::string& name, KeyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyType>(
    KeyType_descriptor(), name, value);
}
// ===================================================================

class PublicKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:libp2p.crypto.protobuf.PublicKey) */ {
 public:
  PublicKey();
  virtual ~PublicKey();

  PublicKey(const PublicKey& from);
  PublicKey(PublicKey&& from) noexcept
    : PublicKey() {
    *this = ::std::move(from);
  }

  inline PublicKey& operator=(const PublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKey& operator=(PublicKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicKey* internal_default_instance() {
    return reinterpret_cast<const PublicKey*>(
               &_PublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicKey& a, PublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicKey* New() const final {
    return CreateMaybeMessage<PublicKey>(nullptr);
  }

  PublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicKey& from);
  void MergeFrom(const PublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "libp2p.crypto.protobuf.PublicKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_crypto_2fprotobuf_2fkeys_2eproto);
    return ::descriptor_table_crypto_2fprotobuf_2fkeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // required bytes Data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required .libp2p.crypto.protobuf.KeyType Type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::libp2p::crypto::protobuf::KeyType type() const;
  void set_type(::libp2p::crypto::protobuf::KeyType value);
  private:
  ::libp2p::crypto::protobuf::KeyType _internal_type() const;
  void _internal_set_type(::libp2p::crypto::protobuf::KeyType value);
  public:

  // @@protoc_insertion_point(class_scope:libp2p.crypto.protobuf.PublicKey)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  friend struct ::TableStruct_crypto_2fprotobuf_2fkeys_2eproto;
};
// -------------------------------------------------------------------

class PrivateKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:libp2p.crypto.protobuf.PrivateKey) */ {
 public:
  PrivateKey();
  virtual ~PrivateKey();

  PrivateKey(const PrivateKey& from);
  PrivateKey(PrivateKey&& from) noexcept
    : PrivateKey() {
    *this = ::std::move(from);
  }

  inline PrivateKey& operator=(const PrivateKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateKey& operator=(PrivateKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateKey* internal_default_instance() {
    return reinterpret_cast<const PrivateKey*>(
               &_PrivateKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrivateKey& a, PrivateKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateKey* New() const final {
    return CreateMaybeMessage<PrivateKey>(nullptr);
  }

  PrivateKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateKey& from);
  void MergeFrom(const PrivateKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "libp2p.crypto.protobuf.PrivateKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_crypto_2fprotobuf_2fkeys_2eproto);
    return ::descriptor_table_crypto_2fprotobuf_2fkeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // required bytes Data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required .libp2p.crypto.protobuf.KeyType Type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::libp2p::crypto::protobuf::KeyType type() const;
  void set_type(::libp2p::crypto::protobuf::KeyType value);
  private:
  ::libp2p::crypto::protobuf::KeyType _internal_type() const;
  void _internal_set_type(::libp2p::crypto::protobuf::KeyType value);
  public:

  // @@protoc_insertion_point(class_scope:libp2p.crypto.protobuf.PrivateKey)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  friend struct ::TableStruct_crypto_2fprotobuf_2fkeys_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicKey

// required .libp2p.crypto.protobuf.KeyType Type = 1;
inline bool PublicKey::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublicKey::has_type() const {
  return _internal_has_type();
}
inline void PublicKey::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::libp2p::crypto::protobuf::KeyType PublicKey::_internal_type() const {
  return static_cast< ::libp2p::crypto::protobuf::KeyType >(type_);
}
inline ::libp2p::crypto::protobuf::KeyType PublicKey::type() const {
  // @@protoc_insertion_point(field_get:libp2p.crypto.protobuf.PublicKey.Type)
  return _internal_type();
}
inline void PublicKey::_internal_set_type(::libp2p::crypto::protobuf::KeyType value) {
  assert(::libp2p::crypto::protobuf::KeyType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void PublicKey::set_type(::libp2p::crypto::protobuf::KeyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:libp2p.crypto.protobuf.PublicKey.Type)
}

// required bytes Data = 2;
inline bool PublicKey::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublicKey::has_data() const {
  return _internal_has_data();
}
inline void PublicKey::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublicKey::data() const {
  // @@protoc_insertion_point(field_get:libp2p.crypto.protobuf.PublicKey.Data)
  return _internal_data();
}
inline void PublicKey::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:libp2p.crypto.protobuf.PublicKey.Data)
}
inline std::string* PublicKey::mutable_data() {
  // @@protoc_insertion_point(field_mutable:libp2p.crypto.protobuf.PublicKey.Data)
  return _internal_mutable_data();
}
inline const std::string& PublicKey::_internal_data() const {
  return data_.GetNoArena();
}
inline void PublicKey::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PublicKey::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libp2p.crypto.protobuf.PublicKey.Data)
}
inline void PublicKey::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libp2p.crypto.protobuf.PublicKey.Data)
}
inline void PublicKey::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libp2p.crypto.protobuf.PublicKey.Data)
}
inline std::string* PublicKey::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicKey::release_data() {
  // @@protoc_insertion_point(field_release:libp2p.crypto.protobuf.PublicKey.Data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicKey::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:libp2p.crypto.protobuf.PublicKey.Data)
}

// -------------------------------------------------------------------

// PrivateKey

// required .libp2p.crypto.protobuf.KeyType Type = 1;
inline bool PrivateKey::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrivateKey::has_type() const {
  return _internal_has_type();
}
inline void PrivateKey::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::libp2p::crypto::protobuf::KeyType PrivateKey::_internal_type() const {
  return static_cast< ::libp2p::crypto::protobuf::KeyType >(type_);
}
inline ::libp2p::crypto::protobuf::KeyType PrivateKey::type() const {
  // @@protoc_insertion_point(field_get:libp2p.crypto.protobuf.PrivateKey.Type)
  return _internal_type();
}
inline void PrivateKey::_internal_set_type(::libp2p::crypto::protobuf::KeyType value) {
  assert(::libp2p::crypto::protobuf::KeyType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void PrivateKey::set_type(::libp2p::crypto::protobuf::KeyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:libp2p.crypto.protobuf.PrivateKey.Type)
}

// required bytes Data = 2;
inline bool PrivateKey::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrivateKey::has_data() const {
  return _internal_has_data();
}
inline void PrivateKey::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrivateKey::data() const {
  // @@protoc_insertion_point(field_get:libp2p.crypto.protobuf.PrivateKey.Data)
  return _internal_data();
}
inline void PrivateKey::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:libp2p.crypto.protobuf.PrivateKey.Data)
}
inline std::string* PrivateKey::mutable_data() {
  // @@protoc_insertion_point(field_mutable:libp2p.crypto.protobuf.PrivateKey.Data)
  return _internal_mutable_data();
}
inline const std::string& PrivateKey::_internal_data() const {
  return data_.GetNoArena();
}
inline void PrivateKey::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PrivateKey::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libp2p.crypto.protobuf.PrivateKey.Data)
}
inline void PrivateKey::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libp2p.crypto.protobuf.PrivateKey.Data)
}
inline void PrivateKey::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libp2p.crypto.protobuf.PrivateKey.Data)
}
inline std::string* PrivateKey::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrivateKey::release_data() {
  // @@protoc_insertion_point(field_release:libp2p.crypto.protobuf.PrivateKey.Data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateKey::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:libp2p.crypto.protobuf.PrivateKey.Data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace crypto
}  // namespace libp2p

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::libp2p::crypto::protobuf::KeyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libp2p::crypto::protobuf::KeyType>() {
  return ::libp2p::crypto::protobuf::KeyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_2fprotobuf_2fkeys_2eproto
